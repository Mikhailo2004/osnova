// reminders.js
class ReminderSystem {
  constructor(bot, dbManager) {
    this.bot = bot;
    this.dbManager = dbManager;
    this.checkInterval = null;
  }

  // –ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º–∏ –Ω–∞–≥–∞–¥—É–≤–∞–Ω—å
  start() {
    console.log('‚è∞ –°–∏—Å—Ç–µ–º–∞ –Ω–∞–≥–∞–¥—É–≤–∞–Ω—å –∑–∞–ø—É—â–µ–Ω–∞');
    
    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –∫–æ–∂–Ω—É —Ö–≤–∏–ª–∏–Ω—É
    this.checkInterval = setInterval(() => {
      this.checkAndSendReminders();
    }, 60000); // 60 —Å–µ–∫—É–Ω–¥

    // –ü–µ—Ä—à–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥ –ø—ñ—Å–ª—è –∑–∞–ø—É—Å–∫—É
    setTimeout(() => {
      this.checkAndSendReminders();
    }, 10000);
  }

  // –ó—É–ø–∏–Ω–∫–∞ —Å–∏—Å—Ç–µ–º–∏ –Ω–∞–≥–∞–¥—É–≤–∞–Ω—å
  stop() {
    if (this.checkInterval) {
      clearInterval(this.checkInterval);
      this.checkInterval = null;
      console.log('‚è∞ –°–∏—Å—Ç–µ–º–∞ –Ω–∞–≥–∞–¥—É–≤–∞–Ω—å –∑—É–ø–∏–Ω–µ–Ω–∞');
    }
  }

  // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ç–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∞ –Ω–∞–≥–∞–¥—É–≤–∞–Ω—å
  async checkAndSendReminders() {
    try {
      const reminders = await this.dbManager.getPendingReminders();
      
      console.log(`üîç –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞–≥–∞–¥—É–≤–∞–Ω—å: –∑–Ω–∞–π–¥–µ–Ω–æ ${reminders.length} –Ω–∞–≥–∞–¥—É–≤–∞–Ω—å`);
      
      for (const reminder of reminders) {
        await this.sendReminder(reminder);
      }
    } catch (error) {
      console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤—ñ—Ä—Ü—ñ –Ω–∞–≥–∞–¥—É–≤–∞–Ω—å:', error);
    }
  }

  // –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è
  async sendReminder(reminder) {
    try {
      const now = new Date();
      const reminderDateTime = new Date(`${reminder.reminder_date}T${reminder.reminder_time}`);
      
      console.log(`‚è∞ –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è ${reminder.id}:`);
      console.log(`   –ü–æ—Ç–æ—á–Ω–∏–π —á–∞—Å: ${now.toLocaleString()}`);
      console.log(`   –ß–∞—Å –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è: ${reminderDateTime.toLocaleString()}`);
      console.log(`   –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á: ${reminder.user_id}`);
      
      // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è —â–µ –∞–∫—Ç—É–∞–ª—å–Ω–µ
      if (now >= reminderDateTime) {
        let message = `‚è∞ –ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è!\n\n${reminder.message}\n\nüìÖ –î–∞—Ç–∞: ${reminder.reminder_date}\n‚è∞ –ß–∞—Å: ${reminder.reminder_time}`;
        
        if (reminder.plan_text) {
          message += `\n\nüìù –ü–ª–∞–Ω:\n${reminder.plan_text}`;
        }
        
        await this.bot.telegram.sendMessage(reminder.user_id, message, {
          reply_markup: {
            inline_keyboard: [
              [{ text: 'üëÅÔ∏è –ü–æ–¥–∏–≤–∏—Ç–∏—Å—è –ø–ª–∞–Ω', callback_data: 'view_plan' }],
              [{ text: '‚úÖ –ü–æ–∑–Ω–∞—á–∏—Ç–∏ –≤–∏–∫–æ–Ω–∞–Ω–∏–º', callback_data: 'mark_completed' }],
              [{ text: 'üîô –ù–∞–∑–∞–¥ –¥–æ –º–µ–Ω—é', callback_data: 'back_to_menu' }]
            ]
          }
        });

        // –ü–æ–∑–Ω–∞—á–∞—î–º–æ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è —è–∫ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–µ
        await this.dbManager.markReminderSent(reminder.id);
        
        console.log(`‚úÖ –ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É ${reminder.user_id}`);
        // –Ø–∫—â–æ –ø–æ–≤—Ç–æ—Ä—é–≤–∞–Ω–µ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è ‚Äî —Å—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤–µ
        if (reminder.repeat_type && reminder.repeat_type !== 'none') {
          const nextDate = this.getNextReminderDate(reminder.reminder_date, reminder.repeat_type);
          if (nextDate) {
            await this.dbManager.createCustomReminder(
              reminder.user_id,
              reminder.plan_id,
              nextDate,
              reminder.reminder_time,
              reminder.message,
              reminder.repeat_type
            );
          }
        }
      } else {
        console.log(`‚è≥ –ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è ${reminder.id} —â–µ –Ω–µ –Ω–∞—Å—Ç–∞–≤ —á–∞—Å`);
      }
    } catch (error) {
      console.error(`‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É ${reminder.user_id}:`, error);
    }
  }

  startAutoCheck() {
    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç—ñ
    this.checkAndSendReminders().catch(console.error);
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑ —ñ–Ω—Ç–µ—Ä–≤–∞–ª–æ–º
    setInterval(async () => {
      try {
        await this.checkAndSendReminders();
      } catch (error) {
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –∞–≤—Ç–æ-–ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –Ω–∞–≥–∞–¥—É–≤–∞–Ω—å:', error);
      }
    }, 60000); // 60 —Å–µ–∫—É–Ω–¥
  }

  getNextReminderDate(currentDate, repeatType) {
    const date = new Date(currentDate);
    switch (repeatType) {
      case 'daily':
        date.setDate(date.getDate() + 1);
        break;
      case 'weekly':
        date.setDate(date.getDate() + 7);
        break;
      case 'monthly':
        date.setMonth(date.getMonth() + 1);
        break;
      default:
        return null;
    }
    return date.toISOString().slice(0, 10);
  }
}

module.exports = ReminderSystem; 