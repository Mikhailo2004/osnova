require('dotenv').config();
const { Telegraf, Markup } = require('telegraf');
const sqlite3 = require('sqlite3').verbose();
const axios = require('axios');
const cron = require('node-cron');

// –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ —Ç–æ–∫–µ–Ω–∞
if (!process.env.TELEGRAM_BOT_TOKEN || process.env.TELEGRAM_BOT_TOKEN === 'your-telegram-bot-token-here') {
  console.log('‚ùå –ü–æ–º–∏–ª–∫–∞: TELEGRAM_BOT_TOKEN –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–π!');
  process.exit(1);
}

const bot = new Telegraf(process.env.TELEGRAM_BOT_TOKEN);
const db = new sqlite3.Database(process.env.DATABASE_PATH || './data/bot.db');

// –û–ø—Ç–∏–º—ñ–∑–æ–≤–∞–Ω—ñ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏ –¥–∞–Ω–∏—Ö
const userStates = new Map();
const messageTracker = new Map();
const userActivityTracker = new Map();
const userSessionTracker = new Map();

// –ö–µ—à –¥–ª—è –∫—É—Ä—Å—ñ–≤ –≤–∞–ª—é—Ç (–∑–º–µ–Ω—à—É—î –Ω–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –Ω–∞ API)
const currencyCache = {
  rates: new Map(),
  lastUpdate: null,
  cacheTimeout: 2 * 60 * 60 * 1000 // 2 –≥–æ–¥–∏–Ω–∏
};

// –î–æ–¥–∞—î–º–æ –ø—ñ–¥—Ç—Ä–∏–º–∫—É –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–≥–æ —ñ–Ω—Ç–µ—Ä–≤–∞–ª—É –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –≤–∞–ª—é—Ç
const CURRENCY_UPDATE_INTERVAL_MINUTES = parseInt(process.env.CURRENCY_UPDATE_INTERVAL_MINUTES, 10) || 30;

// –û–ø—Ç–∏–º—ñ–∑–æ–≤–∞–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
function trackMessage(userId, messageId, type = 'bot') {
  if (!messageTracker.has(userId)) {
    messageTracker.set(userId, []);
  }
  
  const userMessages = messageTracker.get(userId);
  userMessages.push({ id: messageId, type, timestamp: Date.now() });
  
  // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Ç—ñ–ª—å–∫–∏ –æ—Å—Ç–∞–Ω–Ω—ñ 10 –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å (–∑–º–µ–Ω—à–µ–Ω–æ –¥–ª—è —à–≤–∏–¥–∫–æ—Å—Ç—ñ)
  if (userMessages.length > 10) {
    userMessages.shift();
  }
  
  userActivityTracker.set(userId, Date.now());
}

// –û–ø—Ç–∏–º—ñ–∑–æ–≤–∞–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è —Å–µ—Å—ñ—ó
function trackUserSession(userId) {
  const sessionId = Date.now();
  userSessionTracker.set(userId, sessionId);
  return sessionId;
}

function isNewSession(userId) {
  return !userSessionTracker.has(userId);
}

// –û–ø—Ç–∏–º—ñ–∑–æ–≤–∞–Ω–µ –æ—á–∏—â–µ–Ω–Ω—è –Ω–µ–∞–∫—Ç–∏–≤–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
function cleanupInactiveUsers() {
  const now = Date.now();
  const inactiveThreshold = 60 * 60 * 1000; // 1 –≥–æ–¥–∏–Ω–∞ (–∑–±—ñ–ª—å—à–µ–Ω–æ –¥–ª—è —Å—Ç–∞–±—ñ–ª—å–Ω–æ—Å—Ç—ñ)
  
  let cleanedCount = 0;
  for (const [userId, lastActivity] of userActivityTracker.entries()) {
    if (now - lastActivity > inactiveThreshold) {
      cleanupUserData(userId);
      cleanedCount++;
    }
  }
  
  if (cleanedCount > 0) {
    console.log(`üßπ –û—á–∏—â–µ–Ω–æ ${cleanedCount} –Ω–µ–∞–∫—Ç–∏–≤–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤`);
  }
}

// –ó–∞–ø—É—Å–∫–∞—î–º–æ –æ—á–∏—â–µ–Ω–Ω—è –∫–æ–∂–Ω—ñ 15 —Ö–≤–∏–ª–∏–Ω (–∑–º–µ–Ω—à–µ–Ω–æ –Ω–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è)
setInterval(cleanupInactiveUsers, 15 * 60 * 1000);

// –û–ø—Ç–∏–º—ñ–∑–æ–≤–∞–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –æ—á–∏—â–µ–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
async function clearAllUserMessages(ctx, keepMenuId = null) {
  try {
    const userId = ctx.from.id;
    const userMessages = messageTracker.get(userId) || [];
    
    const botMessages = userMessages.filter(msg => msg.type === 'bot');
    const messagesToDelete = keepMenuId 
      ? botMessages.filter(msg => msg.id !== keepMenuId)
      : botMessages;
    
    let deletedCount = 0;
    for (const message of messagesToDelete) {
      const success = await safeDeleteMessage(ctx, message.id);
      if (success) {
        deletedCount++;
        const index = userMessages.findIndex(msg => msg.id === message.id);
        if (index > -1) {
          userMessages.splice(index, 1);
        }
      }
    }
    
    if (deletedCount > 0) {
      console.log(`üßπ –í–∏–¥–∞–ª–µ–Ω–æ ${deletedCount} –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å`);
    }
  } catch (error) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—á–∏—â–µ–Ω–Ω—è:', error);
  }
}

async function clearChat(ctx) {
  try {
    await clearAllUserMessages(ctx);
  } catch (error) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—á–∏—â–µ–Ω–Ω—è —á–∞—Ç—É:', error);
  }
}

async function clearChatForNewSession(ctx) {
  try {
    await clearAllUserMessages(ctx);
  } catch (error) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—á–∏—â–µ–Ω–Ω—è —á–∞—Ç—É:', error);
  }
}

// –û–ø—Ç–∏–º—ñ–∑–æ–≤–∞–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
async function safeDeleteMessage(ctx, messageId) {
  try {
    await ctx.telegram.deleteMessage(ctx.chat.id, messageId);
    return true;
  } catch (error) {
    return false;
  }
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø—É–±–ª—ñ—á–Ω–æ—ó URL –∑ ngrok
async function getNgrokUrl() {
  try {
    const response = await axios.get('http://localhost:4040/api/tunnels', {
      timeout: 5000
    });
    
    if (response.data && response.data.tunnels && response.data.tunnels.length > 0) {
      return response.data.tunnels[0].public_url;
    }
  } catch (error) {
    console.log('Ngrok API –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –ª–æ–∫–∞–ª—å–Ω—É URL');
  }
  
  return null;
}

// –û–ø—Ç–∏–º—ñ–∑–æ–≤–∞–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó –ø–æ–∫–∞–∑—É –º–µ–Ω—é
async function showMainMenu(ctx) {
  try {
    const user = ctx.from;
    await dbManager.saveUser(user);
    
    const menu = await createMainMenu(user.id);
    const welcomeMessage = await ctx.reply(
      'üëã –í—ñ—Ç–∞—é! –Ø —Å—É—á–∞—Å–Ω–∏–π Telegram-–±–æ—Ç –∑ –ø–æ–∫—Ä–∞—â–µ–Ω–æ—é —Å–∏—Å—Ç–µ–º–æ—é –ø–ª–∞–Ω—É–≤–∞–Ω–Ω—è, –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è–º–∏ —Ç–∞ –∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä–æ–º –≤–∞–ª—é—Ç!\n\nüí° –ú–µ–Ω—é –∑–∞–ª–∏—à–∞—î—Ç—å—Å—è –¥–æ—Å—Ç—É–ø–Ω–∏–º –¥–ª—è –∑—Ä—É—á–Ω–æ—Å—Ç—ñ –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó.',
      menu
    );
    
    trackMessage(user.id, welcomeMessage.message_id);
  } catch (error) {
    console.error('–ü–æ–º–∏–ª–∫–∞ –ø–æ–∫–∞–∑—É –º–µ–Ω—é:', error);
  }
}

async function showMainMenuForNewSession(ctx) {
  try {
    const user = ctx.from;
    await clearChatForNewSession(ctx);
    await dbManager.saveUser(user);
    
    const menu = await createMainMenu(user.id);
    const welcomeMessage = await ctx.reply(
      'üëã –í—ñ—Ç–∞—é! –Ø —Å—É—á–∞—Å–Ω–∏–π Telegram-–±–æ—Ç –∑ –ø–æ–∫—Ä–∞—â–µ–Ω–æ—é —Å–∏—Å—Ç–µ–º–æ—é –ø–ª–∞–Ω—É–≤–∞–Ω–Ω—è, –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è–º–∏ —Ç–∞ –∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä–æ–º –≤–∞–ª—é—Ç!\n\nüí° –ú–µ–Ω—é –∑–∞–ª–∏—à–∞—î—Ç—å—Å—è –¥–æ—Å—Ç—É–ø–Ω–∏–º –¥–ª—è –∑—Ä—É—á–Ω–æ—Å—Ç—ñ –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó.',
      menu
    );
    
    trackMessage(user.id, welcomeMessage.message_id);
    trackUserSession(user.id);
  } catch (error) {
    console.error('–ü–æ–º–∏–ª–∫–∞ –ø–æ–∫–∞–∑—É –º–µ–Ω—é –¥–ª—è –Ω–æ–≤–æ—ó —Å–µ—Å—ñ—ó:', error);
  }
}

// –ö–ª–∞—Å –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ –≤–∞–ª—é—Ç–Ω–∏–º–∏ –∫—É—Ä—Å–∞–º–∏
class CurrencyConverter {
  constructor() {
    this.exchangeRates = new Map();
    this.currencies = {
      USD: { flag: 'üá∫üá∏', name: '–î–æ–ª–∞—Ä –°–®–ê' },
      EUR: { flag: 'üá™üá∫', name: '–Ñ–≤—Ä–æ' },
      UAH: { flag: 'üá∫üá¶', name: '–ì—Ä–∏–≤–Ω—è' },
      GBP: { flag: 'üá¨üáß', name: '–§—É–Ω—Ç —Å—Ç–µ—Ä–ª—ñ–Ω–≥—ñ–≤' },
      PLN: { flag: 'üáµüá±', name: '–ó–ª–æ—Ç–∏–π' },
      CZK: { flag: 'üá®üáø', name: '–ß–µ—Å—å–∫–∞ –∫—Ä–æ–Ω–∞' },
      JPY: { flag: 'üáØüáµ', name: '–Ñ–Ω–∞' },
      CNY: { flag: 'üá®üá≥', name: '–Æ–∞–Ω—å' },
      TRY: { flag: 'üáπüá∑', name: '–¢—É—Ä–µ—Ü—å–∫–∞ –ª—ñ—Ä–∞' },
      EGP: { flag: 'üá™üá¨', name: '–Ñ–≥–∏–ø–µ—Ç—Å—å–∫–∏–π —Ñ—É–Ω—Ç' }
    };
    this.lastUpdate = null;
    this.updateInterval = 2 * 60 * 60 * 1000; // 2 –≥–æ–¥–∏–Ω–∏
  }

  async initialize() {
    console.log('üí± –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä–∞ –≤–∞–ª—é—Ç...');
    await this.updateExchangeRates();
    
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∫—É—Ä—Å—ñ–≤
    setInterval(() => {
      this.updateExchangeRates().catch(error => {
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –∞–≤—Ç–æ–æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∫—É—Ä—Å—ñ–≤:', error);
      });
    }, this.updateInterval);
    
    console.log('‚úÖ –ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä –≤–∞–ª—é—Ç –≥–æ—Ç–æ–≤–∏–π –¥–æ —Ä–æ–±–æ—Ç–∏');
  }

  async updateExchangeRates() {
    try {
      console.log('üì° –û—Ç—Ä–∏–º–∞–Ω–Ω—è –∫—É—Ä—Å—ñ–≤ –≤–∞–ª—é—Ç –≤—ñ–¥ –ù–ë–£...');
      
      const response = await axios.get('https://bank.gov.ua/NBUStatService/v1/statdirectory/exchange?json', {
        timeout: 10000 // 10 —Å–µ–∫—É–Ω–¥ —Ç–∞–π–º–∞—É—Ç
      });

      if (response.data && Array.isArray(response.data)) {
        this.exchangeRates.clear();
        
        // –î–æ–¥–∞—î–º–æ USD —è–∫ –±–∞–∑–æ–≤—É –≤–∞–ª—é—Ç—É
        this.exchangeRates.set('USD', { rate: 1, change: 0 });
        
        // –û–±—Ä–æ–±–ª—è—î–º–æ –æ—Ç—Ä–∏–º–∞–Ω—ñ –∫—É—Ä—Å–∏
        response.data.forEach(item => {
          if (this.currencies[item.cc]) {
            this.exchangeRates.set(item.cc, {
              rate: parseFloat(item.rate),
              change: parseFloat(item.rate) - parseFloat(item.rate_prev || item.rate)
            });
          }
        });
        
        this.lastUpdate = new Date();
        console.log(`‚úÖ –ö—É—Ä—Å–∏ –≤–∞–ª—é—Ç –æ–Ω–æ–≤–ª–µ–Ω–æ: ${this.exchangeRates.size} –≤–∞–ª—é—Ç`);
        console.log(`üìÖ –û—Å—Ç–∞–Ω–Ω—î –æ–Ω–æ–≤–ª–µ–Ω–Ω—è: ${this.lastUpdate.toLocaleString('uk-UA')}`);
      } else {
        throw new Error('–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–∏—Ö –≤—ñ–¥ –ù–ë–£');
      }
    } catch (error) {
      console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∫—É—Ä—Å—ñ–≤:', error.message);
      this.setBackupRates();
    }
  }

  setBackupRates() {
    // –†–µ–∑–µ—Ä–≤–Ω—ñ –∫—É—Ä—Å–∏ –Ω–∞ –≤–∏–ø–∞–¥–æ–∫ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—ñ API
    const backupRates = {
      USD: { rate: 1, change: 0 },
      EUR: { rate: 0.915, change: 0.005 },
      UAH: { rate: 39.5, change: -0.2 },
      GBP: { rate: 0.782, change: 0.011 },
      PLN: { rate: 3.95, change: -0.03 },
      CZK: { rate: 23.0, change: 0.8 },
      JPY: { rate: 150.0, change: -0.1 },
      CNY: { rate: 7.2, change: 0.4 },
      TRY: { rate: 32.0, change: -1.2 },
      EGP: { rate: 31.0, change: 0.7 }
    };

    this.exchangeRates.clear();
    Object.entries(backupRates).forEach(([currency, data]) => {
      this.exchangeRates.set(currency, data);
    });
    
    this.lastUpdate = new Date();
    console.log('‚ö†Ô∏è –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—Ç—å—Å—è —Ä–µ–∑–µ—Ä–≤–Ω—ñ –∫—É—Ä—Å–∏ –≤–∞–ª—é—Ç');
  }

  convert(amount, fromCurrency, toCurrency) {
    if (!this.exchangeRates.has(fromCurrency) || !this.exchangeRates.has(toCurrency)) {
      throw new Error('–ù–µ–ø—ñ–¥—Ç—Ä–∏–º—É–≤–∞–Ω–∞ –≤–∞–ª—é—Ç–∞');
    }

    const fromRate = this.exchangeRates.get(fromCurrency).rate;
    const toRate = this.exchangeRates.get(toCurrency).rate;
    
    const uahAmount = amount * fromRate;
    const result = uahAmount / toRate;
    
    return {
      amount: amount,
      fromCurrency: fromCurrency,
      toCurrency: toCurrency,
      result: result,
      rate: toRate / fromRate,
      date: this.lastUpdate
    };
  }

  getCurrencies() {
    return this.currencies;
  }

  getExchangeRates() {
    return this.exchangeRates;
  }

  isSupported(currency) {
    return this.currencies.hasOwnProperty(currency);
  }

  formatResult(conversion) {
    const fromCurrency = this.currencies[conversion.fromCurrency];
    const toCurrency = this.currencies[conversion.toCurrency];
    
    const formatAmount = (amount) => {
      if (amount >= 1000000) {
        return (amount / 1000000).toFixed(2) + 'M';
      } else if (amount >= 1000) {
        return (amount / 1000).toFixed(2) + 'K';
      } else {
        return amount.toFixed(2);
      }
    };
    
    return {
      from: `${fromCurrency.flag} ${formatAmount(conversion.amount)} ${conversion.fromCurrency}`,
      to: `${toCurrency.flag} ${formatAmount(conversion.result)} ${conversion.toCurrency}`,
      rate: `1 ${conversion.fromCurrency} = ${conversion.rate.toFixed(4)} ${conversion.toCurrency}`,
      reverseRate: `1 ${conversion.toCurrency} = ${(1 / conversion.rate).toFixed(4)} ${conversion.fromCurrency}`,
      date: conversion.date ? conversion.date.toLocaleDateString('uk-UA') : '–ù–µ–≤—ñ–¥–æ–º–æ'
    };
  }

  formatExchangeRatesForAmount(amount = 100) {
    const rates = this.getExchangeRates();
    const currencies = this.getCurrencies();
    let message = `üìä –ö—É—Ä—Å–∏ –æ–±–º—ñ–Ω—É –¥–ª—è ${amount} USD:\n\n`;
    
    const usdRate = rates.get('USD')?.rate || 1;
    
    rates.forEach((rateData, currency) => {
      if (currency !== 'USD') {
        const currencyInfo = currencies[currency];
        const rate = (rateData.rate / usdRate) * amount;
        const formattedRate = rate >= 1 ? rate.toFixed(2) : rate.toFixed(4);
        const change = rateData.change ? ` (${rateData.change > 0 ? '+' : ''}${rateData.change.toFixed(2)}%)` : '';
        message += `${currencyInfo.flag} ${currency}: ${formattedRate}${change}\n`;
      }
    });
    
    message += `\nüìÖ –û—Å—Ç–∞–Ω–Ω—î –æ–Ω–æ–≤–ª–µ–Ω–Ω—è: ${this.lastUpdate ? this.lastUpdate.toLocaleString('uk-UA') : '–ù–µ–≤—ñ–¥–æ–º–æ'}`;
    message += `\nüí° –ö—É—Ä—Å–∏ –≤—ñ–¥ –ù–∞—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ–≥–æ –±–∞–Ω–∫—É –£–∫—Ä–∞—ó–Ω–∏`;
    
    return message;
  }

  formatExchangeRatesForCurrency(baseCurrency, amount = 100) {
    const rates = this.getExchangeRates();
    const currencies = this.getCurrencies();
    
    if (!rates.has(baseCurrency)) {
      throw new Error('–ù–µ–ø—ñ–¥—Ç—Ä–∏–º—É–≤–∞–Ω–∞ –≤–∞–ª—é—Ç–∞');
    }
    
    let message = `üìä –ö—É—Ä—Å–∏ –æ–±–º—ñ–Ω—É –¥–ª—è ${amount} ${baseCurrency}:\n\n`;
    
    const baseRate = rates.get(baseCurrency).rate;
    
    rates.forEach((rateData, currency) => {
      if (currency !== baseCurrency) {
        const currencyInfo = currencies[currency];
        const rate = (rateData.rate / baseRate) * amount;
        const formattedRate = rate >= 1 ? rate.toFixed(2) : rate.toFixed(4);
        const change = rateData.change ? ` (${rateData.change > 0 ? '+' : ''}${rateData.change.toFixed(2)}%)` : '';
        message += `${currencyInfo.flag} ${currency}: ${formattedRate}${change}\n`;
      }
    });
    
    message += `\nüìÖ –û—Å—Ç–∞–Ω–Ω—î –æ–Ω–æ–≤–ª–µ–Ω–Ω—è: ${this.lastUpdate ? this.lastUpdate.toLocaleString('uk-UA') : '–ù–µ–≤—ñ–¥–æ–º–æ'}`;
    message += `\nüí° –ö—É—Ä—Å–∏ –≤—ñ–¥ –ù–∞—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ–≥–æ –±–∞–Ω–∫—É –£–∫—Ä–∞—ó–Ω–∏`;
    
    return message;
  }

  async startAutoUpdate() {
    // –û–Ω–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–∏ —Å—Ç–∞—Ä—Ç—ñ
    await this.updateExchangeRates();
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∑ —ñ–Ω—Ç–µ—Ä–≤–∞–ª–æ–º
    setInterval(async () => {
      try {
        await this.updateExchangeRates();
      } catch (error) {
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –∞–≤—Ç–æ–æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∫—É—Ä—Å—ñ–≤:', error);
      }
    }, CURRENCY_UPDATE_INTERVAL_MINUTES * 60 * 1000);
  }
}

// –ö–ª–∞—Å –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ –±–∞–∑–æ—é –¥–∞–Ω–∏—Ö
class DatabaseManager {
  constructor(database) {
    this.db = database;
    this.version = 3; // –í–µ—Ä—Å—ñ—è —Å—Ö–µ–º–∏ –ë–î
  }

  // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
  async initialize() {
    return new Promise((resolve, reject) => {
      this.db.serialize(() => {
        try {
          // –°—Ç–≤–æ—Ä—é—î–º–æ —Ç–∞–±–ª–∏—Ü—é –≤–µ—Ä—Å—ñ–π
          this.db.run(`CREATE TABLE IF NOT EXISTS db_version (
            version INTEGER PRIMARY KEY,
            applied_at DATETIME DEFAULT CURRENT_TIMESTAMP
          )`);

          // –°—Ç–≤–æ—Ä—é—î–º–æ –æ—Å–Ω–æ–≤–Ω—ñ —Ç–∞–±–ª–∏—Ü—ñ
          this.createTables();
          
          // –í–∏–∫–æ–Ω—É—î–º–æ –º—ñ–≥—Ä–∞—Ü—ñ—ó
          this.runMigrations().then(() => {
            console.log('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–∏—Ö —É—Å–ø—ñ—à–Ω–æ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∞');
            resolve();
          }).catch(reject);

        } catch (error) {
          reject(error);
        }
      });
    });
  }

  // –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—å
  createTables() {
    // –¢–∞–±–ª–∏—Ü—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
    this.db.run(`CREATE TABLE IF NOT EXISTS users (
      id INTEGER PRIMARY KEY,
      username TEXT,
      first_name TEXT,
      last_name TEXT,
      is_admin INTEGER DEFAULT 0,
      created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
      last_activity DATETIME DEFAULT CURRENT_TIMESTAMP,
      settings TEXT DEFAULT '{}',
      reminder_time TEXT DEFAULT '07:00',
      reminder_enabled INTEGER DEFAULT 1
    )`);

    // –¢–∞–±–ª–∏—Ü—è –ø–ª–∞–Ω—ñ–≤ –Ω–∞ –∑–∞–≤—Ç—Ä–∞
    this.db.run(`CREATE TABLE IF NOT EXISTS tomorrow_plans (
      id INTEGER PRIMARY KEY AUTOINCREMENT,
      user_id INTEGER NOT NULL,
      plan_text TEXT NOT NULL,
      plan_date TEXT NOT NULL,
      created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
      updated_at DATETIME DEFAULT CURRENT_TIMESTAMP,
      completed INTEGER DEFAULT 0,
      completed_at DATETIME,
      priority INTEGER DEFAULT 1,
      category TEXT DEFAULT 'general',
      notes TEXT,
      tags TEXT,
      reminder_sent INTEGER DEFAULT 0,
      FOREIGN KEY (user_id) REFERENCES users (id) ON DELETE CASCADE
    )`);

    // –¢–∞–±–ª–∏—Ü—è –∫–∞—Ç–µ–≥–æ—Ä—ñ–π
    this.db.run(`CREATE TABLE IF NOT EXISTS categories (
      id INTEGER PRIMARY KEY AUTOINCREMENT,
      user_id INTEGER NOT NULL,
      name TEXT NOT NULL,
      color TEXT DEFAULT '#007AFF',
      icon TEXT DEFAULT 'üìÅ',
      created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
      FOREIGN KEY (user_id) REFERENCES users (id) ON DELETE CASCADE
    )`);

    // –¢–∞–±–ª–∏—Ü—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    this.db.run(`CREATE TABLE IF NOT EXISTS statistics (
      id INTEGER PRIMARY KEY AUTOINCREMENT,
      user_id INTEGER NOT NULL,
      date TEXT NOT NULL,
      plans_created INTEGER DEFAULT 0,
      plans_completed INTEGER DEFAULT 0,
      created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
      FOREIGN KEY (user_id) REFERENCES users (id) ON DELETE CASCADE
    )`);

    // –¢–∞–±–ª–∏—Ü—è –Ω–∞–≥–∞–¥—É–≤–∞–Ω—å
    this.db.run(`CREATE TABLE IF NOT EXISTS reminders (
      id INTEGER PRIMARY KEY AUTOINCREMENT,
      user_id INTEGER NOT NULL,
      plan_id INTEGER,
      reminder_date TEXT NOT NULL,
      reminder_time TEXT NOT NULL,
      message TEXT,
      repeat_type TEXT DEFAULT 'none',
      sent INTEGER DEFAULT 0
    )`);

    // –°—Ç–≤–æ—Ä—é—î–º–æ —ñ–Ω–¥–µ–∫—Å–∏ –¥–ª—è —à–≤–∏–¥–∫–æ—Å—Ç—ñ
    this.db.run(`CREATE INDEX IF NOT EXISTS idx_plans_user_date ON tomorrow_plans(user_id, plan_date)`);
    this.db.run(`CREATE INDEX IF NOT EXISTS idx_plans_created ON tomorrow_plans(created_at DESC)`);
    this.db.run(`CREATE INDEX IF NOT EXISTS idx_users_activity ON users(last_activity DESC)`);
    this.db.run(`CREATE INDEX IF NOT EXISTS idx_statistics_user_date ON statistics(user_id, date)`);
    this.db.run(`CREATE INDEX IF NOT EXISTS idx_reminders_date_time ON reminders(reminder_date, reminder_time)`);
    this.db.run(`CREATE INDEX IF NOT EXISTS idx_reminders_sent ON reminders(sent)`);

    // –¢—Ä–∏–≥–µ—Ä –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ–≥–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è updated_at
    this.db.run(`CREATE TRIGGER IF NOT EXISTS update_plans_timestamp 
                AFTER UPDATE ON tomorrow_plans 
                BEGIN
                  UPDATE tomorrow_plans SET updated_at = CURRENT_TIMESTAMP WHERE id = NEW.id;
                END`);

    // –¢—Ä–∏–≥–µ—Ä –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    this.db.run(`CREATE TRIGGER IF NOT EXISTS update_statistics_on_plan_create
                AFTER INSERT ON tomorrow_plans
                BEGIN
                  INSERT OR REPLACE INTO statistics (user_id, date, plans_created)
                  VALUES (NEW.user_id, NEW.plan_date, 
                    COALESCE((SELECT plans_created FROM statistics WHERE user_id = NEW.user_id AND date = NEW.plan_date), 0) + 1);
                END`);

    this.db.run(`CREATE TRIGGER IF NOT EXISTS update_statistics_on_plan_complete
                AFTER UPDATE ON tomorrow_plans
                WHEN NEW.completed = 1 AND OLD.completed = 0
                BEGIN
                  INSERT OR REPLACE INTO statistics (user_id, date, plans_completed)
                  VALUES (NEW.user_id, NEW.plan_date, 
                    COALESCE((SELECT plans_completed FROM statistics WHERE user_id = NEW.user_id AND date = NEW.plan_date), 0) + 1);
                END`);

    // –¢—Ä–∏–≥–µ—Ä –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–∞–≥–∞–¥—É–≤–∞–Ω—å
    this.db.run(`CREATE TRIGGER IF NOT EXISTS create_reminder_on_plan_create
                AFTER INSERT ON tomorrow_plans
                BEGIN
                  INSERT INTO reminders (user_id, plan_id, reminder_date, reminder_time, message)
                  SELECT 
                    NEW.user_id, 
                    NEW.id, 
                    NEW.plan_date, 
                    COALESCE((SELECT reminder_time FROM users WHERE id = NEW.user_id), '07:00'),
                    '–ù–µ –∑–∞–±—É–¥—å –≤–∏–∫–æ–Ω–∞—Ç–∏ —Å–≤–æ—ó –ø–ª–∞–Ω–∏ –Ω–∞ ' || NEW.plan_date || '! üìù'
                  WHERE (SELECT reminder_enabled FROM users WHERE id = NEW.user_id) = 1;
                END`);
  }

  // –í–∏–∫–æ–Ω–∞–Ω–Ω—è –º—ñ–≥—Ä–∞—Ü—ñ–π
  async runMigrations() {
    return new Promise((resolve, reject) => {
      this.db.get("SELECT version FROM db_version ORDER BY version DESC LIMIT 1", (err, row) => {
        if (err) {
          reject(err);
          return;
        }

        const currentVersion = row ? row.version : 0;
        
        if (currentVersion < this.version) {
          this.migrateFromVersion(currentVersion).then(resolve).catch(reject);
        } else {
          resolve();
        }
      });
    });
  }

  // –ú—ñ–≥—Ä–∞—Ü—ñ—è –∑ –ø–æ—Ç–æ—á–Ω–æ—ó –≤–µ—Ä—Å—ñ—ó
  async migrateFromVersion(fromVersion) {
    console.log(`üîÑ –ú—ñ–≥—Ä–∞—Ü—ñ—è –ë–î –∑ –≤–µ—Ä—Å—ñ—ó ${fromVersion} –¥–æ ${this.version}`);

    if (fromVersion < 1) {
      await this.migrateToVersion1();
    }

    if (fromVersion < 2) {
      await this.migrateToVersion2();
    }

    if (fromVersion < 3) {
      await this.migrateToVersion3();
    }

    // –û–Ω–æ–≤–ª—é—î–º–æ –≤–µ—Ä—Å—ñ—é –ë–î
    return new Promise((resolve, reject) => {
      this.db.run("INSERT OR REPLACE INTO db_version (version) VALUES (?)", [this.version], (err) => {
        if (err) reject(err);
        else resolve();
      });
    });
  }

  // –ú—ñ–≥—Ä–∞—Ü—ñ—è –¥–æ –≤–µ—Ä—Å—ñ—ó 1
  async migrateToVersion1() {
    return new Promise((resolve, reject) => {
      // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —ñ—Å–Ω—É—î —Å—Ç–∞—Ä–∞ —Ç–∞–±–ª–∏—Ü—è
      this.db.get("SELECT name FROM sqlite_master WHERE type='table' AND name='tomorrow_plans'", (err, row) => {
        if (err) {
          reject(err);
          return;
        }

        if (row) {
          // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Å—Ç–∞—Ä–æ—ó —Ç–∞–±–ª–∏—Ü—ñ
          this.db.all("PRAGMA table_info(tomorrow_plans)", (err, columns) => {
            if (err) {
              reject(err);
              return;
            }

            const columnNames = columns.map(col => col.name);
            const migrations = [];

            // –î–æ–¥–∞—î–º–æ –≤—ñ–¥—Å—É—Ç–Ω—ñ –∫–æ–ª–æ–Ω–∫–∏
            if (!columnNames.includes('created_at')) {
              migrations.push("ALTER TABLE tomorrow_plans ADD COLUMN created_at DATETIME");
            }
            if (!columnNames.includes('updated_at')) {
              migrations.push("ALTER TABLE tomorrow_plans ADD COLUMN updated_at DATETIME");
            }
            if (!columnNames.includes('completed_at')) {
              migrations.push("ALTER TABLE tomorrow_plans ADD COLUMN completed_at DATETIME");
            }
            if (!columnNames.includes('priority')) {
              migrations.push("ALTER TABLE tomorrow_plans ADD COLUMN priority INTEGER DEFAULT 1");
            }
            if (!columnNames.includes('category')) {
              migrations.push("ALTER TABLE tomorrow_plans ADD COLUMN category TEXT DEFAULT 'general'");
            }
            if (!columnNames.includes('notes')) {
              migrations.push("ALTER TABLE tomorrow_plans ADD COLUMN notes TEXT");
            }
            if (!columnNames.includes('tags')) {
              migrations.push("ALTER TABLE tomorrow_plans ADD COLUMN tags TEXT");
            }

            // –í–∏–∫–æ–Ω—É—î–º–æ –º—ñ–≥—Ä–∞—Ü—ñ—ó
            let completed = 0;
            if (migrations.length === 0) {
              resolve();
              return;
            }

            migrations.forEach(migration => {
              this.db.run(migration, (err) => {
                if (err) {
                  console.error('–ü–æ–º–∏–ª–∫–∞ –º—ñ–≥—Ä–∞—Ü—ñ—ó:', err);
                }
                completed++;
                if (completed === migrations.length) {
                  // –û–Ω–æ–≤–ª—é—î–º–æ –∑–Ω–∞—á–µ–Ω–Ω—è –¥–ª—è —ñ—Å–Ω—É—é—á–∏—Ö –∑–∞–ø–∏—Å—ñ–≤
                  this.updateExistingRecords();
                  resolve();
                }
              });
            });
          });
        } else {
          resolve();
        }
      });
    });
  }

  // –ú—ñ–≥—Ä–∞—Ü—ñ—è –¥–æ –≤–µ—Ä—Å—ñ—ó 2
  async migrateToVersion2() {
    return new Promise((resolve, reject) => {
      // –î–æ–¥–∞—î–º–æ –Ω–æ–≤—ñ —Ñ—É–Ω–∫—Ü—ñ—ó –¥–ª—è –≤–µ—Ä—Å—ñ—ó 2
      this.db.run("ALTER TABLE users ADD COLUMN settings TEXT DEFAULT '{}'", (err) => {
        if (err && !err.message.includes('duplicate column')) {
          console.error('–ü–æ–º–∏–ª–∫–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è settings:', err);
        }
        resolve();
      });
    });
  }

  // –ú—ñ–≥—Ä–∞—Ü—ñ—è –¥–æ –≤–µ—Ä—Å—ñ—ó 3 (–Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è)
  async migrateToVersion3() {
    return new Promise((resolve, reject) => {
      // –î–æ–¥–∞—î–º–æ –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è –Ω–∞–≥–∞–¥—É–≤–∞–Ω—å
      const migrations = [
        "ALTER TABLE users ADD COLUMN reminder_time TEXT DEFAULT '07:00'",
        "ALTER TABLE users ADD COLUMN reminder_enabled INTEGER DEFAULT 1",
        "ALTER TABLE tomorrow_plans ADD COLUMN reminder_sent INTEGER DEFAULT 0"
      ];

      let completed = 0;
      migrations.forEach(migration => {
        this.db.run(migration, (err) => {
          if (err && !err.message.includes('duplicate column')) {
            console.error('–ü–æ–º–∏–ª–∫–∞ –º—ñ–≥—Ä–∞—Ü—ñ—ó –Ω–∞–≥–∞–¥—É–≤–∞–Ω—å:', err);
          }
          completed++;
          if (completed === migrations.length) {
            resolve();
          }
        });
      });
    });
  }

  // –û–Ω–æ–≤–ª–µ–Ω–Ω—è —ñ—Å–Ω—É—é—á–∏—Ö –∑–∞–ø–∏—Å—ñ–≤
  updateExistingRecords() {
    this.db.run("UPDATE tomorrow_plans SET created_at = CURRENT_TIMESTAMP WHERE created_at IS NULL");
    this.db.run("UPDATE tomorrow_plans SET updated_at = CURRENT_TIMESTAMP WHERE updated_at IS NULL");
  }

  // –ú–µ—Ç–æ–¥–∏ –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º–∏
  async saveUser(user) {
    return new Promise((resolve, reject) => {
      this.db.run(
        `INSERT OR REPLACE INTO users (id, username, first_name, last_name, last_activity) 
         VALUES (?, ?, ?, ?, CURRENT_TIMESTAMP)`,
        [user.id, user.username, user.first_name, user.last_name],
        function(err) {
          if (err) reject(err);
          else resolve(this.lastID);
        }
      );
    });
  }

  async updateUserActivity(userId) {
    return new Promise((resolve, reject) => {
      this.db.run(
        "UPDATE users SET last_activity = CURRENT_TIMESTAMP WHERE id = ?",
        [userId],
        function(err) {
          if (err) reject(err);
          else resolve();
        }
      );
    });
  }

  // –ú–µ—Ç–æ–¥–∏ –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ –ø–ª–∞–Ω–∞–º–∏
  async savePlan(userId, planText, category = 'general', priority = 1, notes = '') {
    return new Promise((resolve, reject) => {
      const tomorrow = this.getTomorrowDate();
      
      // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –≤–∂–µ —î –ø–ª–∞–Ω –Ω–∞ –∑–∞–≤—Ç—Ä–∞
      this.db.get(
        "SELECT id FROM tomorrow_plans WHERE user_id = ? AND plan_date = ?",
        [userId, tomorrow],
        (err, existingPlan) => {
          if (err) {
            reject(err);
            return;
          }

          if (existingPlan) {
            // –û–Ω–æ–≤–ª—é—î–º–æ —ñ—Å–Ω—É—é—á–∏–π –ø–ª–∞–Ω
            this.db.run(
              `UPDATE tomorrow_plans 
               SET plan_text = ?, category = ?, priority = ?, notes = ?, updated_at = CURRENT_TIMESTAMP
               WHERE id = ?`,
              [planText, category, priority, notes, existingPlan.id],
              function(err) {
                if (err) reject(err);
                else resolve({ id: existingPlan.id, updated: true });
              }
            );
          } else {
            // –°—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤–∏–π –ø–ª–∞–Ω
            this.db.run(
              `INSERT INTO tomorrow_plans (user_id, plan_text, plan_date, category, priority, notes) 
               VALUES (?, ?, ?, ?, ?, ?)`,
              [userId, planText, tomorrow, category, priority, notes],
              function(err) {
                if (err) reject(err);
                else resolve({ id: this.lastID, updated: false });
              }
            );
          }
        }
      );
    });
  }

  async getPlan(userId) {
    return new Promise((resolve, reject) => {
      const tomorrow = this.getTomorrowDate();
      
      this.db.get(
        `SELECT * FROM tomorrow_plans 
         WHERE user_id = ? AND plan_date = ? 
         ORDER BY priority DESC, created_at DESC LIMIT 1`,
        [userId, tomorrow],
        (err, row) => {
          if (err) reject(err);
          else resolve(row);
        }
      );
    });
  }

  async getPlans(userId, limit = 10) {
    return new Promise((resolve, reject) => {
      this.db.all(
        `SELECT * FROM tomorrow_plans 
         WHERE user_id = ? 
         ORDER BY plan_date DESC, priority DESC, created_at DESC 
         LIMIT ?`,
        [userId, limit],
        (err, rows) => {
          if (err) reject(err);
          else resolve(rows);
        }
      );
    });
  }

  async markPlanCompleted(planId, userId) {
    return new Promise((resolve, reject) => {
      this.db.run(
        `UPDATE tomorrow_plans 
         SET completed = 1, completed_at = CURRENT_TIMESTAMP 
         WHERE id = ? AND user_id = ?`,
        [planId, userId],
        function(err) {
          if (err) reject(err);
          else resolve(this.changes > 0);
        }
      );
    });
  }

  async deletePlan(planId, userId) {
    return new Promise((resolve, reject) => {
      this.db.run(
        "DELETE FROM tomorrow_plans WHERE id = ? AND user_id = ?",
        [planId, userId],
        function(err) {
          if (err) reject(err);
          else resolve(this.changes > 0);
        }
      );
    });
  }

  // –ú–µ—Ç–æ–¥–∏ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
  async getStatistics(userId, days = 7) {
    return new Promise((resolve, reject) => {
      const startDate = new Date();
      startDate.setDate(startDate.getDate() - days);
      const startDateStr = startDate.toISOString().split('T')[0];

      this.db.all(
        `SELECT * FROM statistics 
         WHERE user_id = ? AND date >= ? 
         ORDER BY date DESC`,
        [userId, startDateStr],
        (err, rows) => {
          if (err) reject(err);
          else resolve(rows);
        }
      );
    });
  }

  // –ú–µ—Ç–æ–¥–∏ –¥–ª—è –Ω–∞–≥–∞–¥—É–≤–∞–Ω—å
  async getPendingReminders() {
    return new Promise((resolve, reject) => {
      const now = new Date();
      const currentDate = now.toISOString().split('T')[0];
      const currentTime = now.toLocaleTimeString('en-US', { 
        hour12: false, 
        hour: '2-digit', 
        minute: '2-digit' 
      });

      this.db.all(
        `SELECT r.*, u.first_name, u.username, p.plan_text 
         FROM reminders r 
         JOIN users u ON r.user_id = u.id 
         LEFT JOIN tomorrow_plans p ON r.plan_id = p.id
         WHERE r.reminder_date = ? 
         AND r.reminder_time <= ? 
         AND r.sent = 0 
         AND u.reminder_enabled = 1`,
        [currentDate, currentTime],
        (err, rows) => {
          if (err) reject(err);
          else resolve(rows);
        }
      );
    });
  }

  async markReminderSent(reminderId) {
    return new Promise((resolve, reject) => {
      this.db.run(
        `UPDATE reminders 
         SET sent = 1, sent_at = CURRENT_TIMESTAMP 
         WHERE id = ?`,
        [reminderId],
        function(err) {
          if (err) reject(err);
          else resolve(this.changes > 0);
        }
      );
    });
  }

  async updateUserReminderSettings(userId, reminderTime, reminderEnabled) {
    return new Promise((resolve, reject) => {
      this.db.run(
        `UPDATE users 
         SET reminder_time = ?, reminder_enabled = ? 
         WHERE id = ?`,
        [reminderTime, reminderEnabled ? 1 : 0, userId],
        function(err) {
          if (err) reject(err);
          else resolve(this.changes > 0);
        }
      );
    });
  }

  async getUserReminderSettings(userId) {
    return new Promise((resolve, reject) => {
      this.db.get(
        "SELECT reminder_time, reminder_enabled FROM users WHERE id = ?",
        [userId],
        (err, row) => {
          if (err) reject(err);
          else resolve(row);
        }
      );
    });
  }

  // –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –∑ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ—é –¥–∞—Ç–æ—é —Ç–∞ —á–∞—Å–æ–º
  async createCustomReminder(userId, planId, reminderDate, reminderTime, message, repeatType = 'none') {
    return new Promise((resolve, reject) => {
      this.db.run(
        `INSERT INTO reminders (user_id, plan_id, reminder_date, reminder_time, message, repeat_type) VALUES (?, ?, ?, ?, ?, ?)`,
        [userId, planId, reminderDate, reminderTime, message, repeatType],
        function(err) {
          if (err) reject(err);
          else resolve(this.lastID);
        }
      );
    });
  }

  // –û—Ç—Ä–∏–º–∞–Ω–Ω—è –≤—Å—ñ—Ö –Ω–∞–≥–∞–¥—É–≤–∞–Ω—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
  async getUserReminders(userId) {
    return new Promise((resolve, reject) => {
      this.db.all(
        `SELECT r.*, p.plan_text 
         FROM reminders r 
         LEFT JOIN tomorrow_plans p ON r.plan_id = p.id
         WHERE r.user_id = ? 
         ORDER BY r.reminder_date DESC, r.reminder_time DESC`,
        [userId],
        (err, rows) => {
          if (err) reject(err);
          else resolve(rows);
        }
      );
    });
  }

  // –í–∏–¥–∞–ª–µ–Ω–Ω—è –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è
  async deleteReminder(reminderId, userId) {
    return new Promise((resolve, reject) => {
      this.db.run(
        "DELETE FROM reminders WHERE id = ? AND user_id = ?",
        [reminderId, userId],
        function(err) {
          if (err) reject(err);
          else resolve(this.changes > 0);
        }
      );
    });
  }

  // –î–æ–ø–æ–º—ñ–∂–Ω—ñ –º–µ—Ç–æ–¥–∏
  getTomorrowDate() {
    const tomorrow = new Date();
    tomorrow.setDate(tomorrow.getDate() + 1);
    return tomorrow.toISOString().split('T')[0];
  }

  getCurrentDate() {
    return new Date().toISOString().split('T')[0];
  }

  // –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –¥–∞—Ç –¥–ª—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è
  generateCalendarDates() {
    const dates = [];
    const today = new Date();
    
    // –ì–µ–Ω–µ—Ä—É—î–º–æ –¥–∞—Ç–∏ –Ω–∞ –Ω–∞—Å—Ç—É–ø–Ω—ñ 30 –¥–Ω—ñ–≤
    for (let i = 0; i < 30; i++) {
      const date = new Date(today);
      date.setDate(today.getDate() + i);
      dates.push({
        date: date.toISOString().split('T')[0],
        display: date.toLocaleDateString('uk-UA', {
          weekday: 'short',
          month: 'short',
          day: 'numeric'
        }),
        isToday: i === 0,
        isTomorrow: i === 1
      });
    }
    
    return dates;
  }

  // –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è —á–∞—Å–æ–≤–∏—Ö —Å–ª–æ—Ç—ñ–≤
  generateTimeSlots() {
    const slots = [];
    
    // –ì–µ–Ω–µ—Ä—É—î–º–æ —á–∞—Å–æ–≤—ñ —Å–ª–æ—Ç–∏ –∑ 6:00 –¥–æ 22:00 –∫–æ–∂–Ω—ñ 30 —Ö–≤–∏–ª–∏–Ω
    for (let hour = 6; hour <= 22; hour++) {
      for (let minute = 0; minute < 60; minute += 30) {
        const time = `${hour.toString().padStart(2, '0')}:${minute.toString().padStart(2, '0')}`;
        slots.push({
          time: time,
          display: time
        });
      }
    }
    
    return slots;
  }
}

// –°—Ç–≤–æ—Ä—é—î–º–æ –µ–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –ë–î
const dbManager = new DatabaseManager(db);

// –°—Ç–≤–æ—Ä—é—î–º–æ –µ–∫–∑–µ–º–ø–ª—è—Ä –∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä–∞ –≤–∞–ª—é—Ç
const currencyConverter = new CurrencyConverter();
currencyConverter.startAutoUpdate().catch(console.error);

// –°–∏—Å—Ç–µ–º–∞ –Ω–∞–≥–∞–¥—É–≤–∞–Ω—å
class ReminderSystem {
  constructor(bot, dbManager) {
    this.bot = bot;
    this.dbManager = dbManager;
    this.checkInterval = null;
  }

  // –ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º–∏ –Ω–∞–≥–∞–¥—É–≤–∞–Ω—å
  start() {
    console.log('‚è∞ –°–∏—Å—Ç–µ–º–∞ –Ω–∞–≥–∞–¥—É–≤–∞–Ω—å –∑–∞–ø—É—â–µ–Ω–∞');
    
    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –∫–æ–∂–Ω—É —Ö–≤–∏–ª–∏–Ω—É
    this.checkInterval = setInterval(() => {
      this.checkAndSendReminders();
    }, 60000); // 60 —Å–µ–∫—É–Ω–¥

    // –ü–µ—Ä—à–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥ –ø—ñ—Å–ª—è –∑–∞–ø—É—Å–∫—É
    setTimeout(() => {
      this.checkAndSendReminders();
    }, 10000);
  }

  // –ó—É–ø–∏–Ω–∫–∞ —Å–∏—Å—Ç–µ–º–∏ –Ω–∞–≥–∞–¥—É–≤–∞–Ω—å
  stop() {
    if (this.checkInterval) {
      clearInterval(this.checkInterval);
      this.checkInterval = null;
      console.log('‚è∞ –°–∏—Å—Ç–µ–º–∞ –Ω–∞–≥–∞–¥—É–≤–∞–Ω—å –∑—É–ø–∏–Ω–µ–Ω–∞');
    }
  }

  // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ç–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∞ –Ω–∞–≥–∞–¥—É–≤–∞–Ω—å
  async checkAndSendReminders() {
    try {
      const reminders = await this.dbManager.getPendingReminders();
      
      console.log(`üîç –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞–≥–∞–¥—É–≤–∞–Ω—å: –∑–Ω–∞–π–¥–µ–Ω–æ ${reminders.length} –Ω–∞–≥–∞–¥—É–≤–∞–Ω—å`);
      
      for (const reminder of reminders) {
        await this.sendReminder(reminder);
      }
    } catch (error) {
      console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤—ñ—Ä—Ü—ñ –Ω–∞–≥–∞–¥—É–≤–∞–Ω—å:', error);
    }
  }

  // –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è
  async sendReminder(reminder) {
    try {
      const now = new Date();
      const reminderDateTime = new Date(`${reminder.reminder_date}T${reminder.reminder_time}`);
      
      console.log(`‚è∞ –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è ${reminder.id}:`);
      console.log(`   –ü–æ—Ç–æ—á–Ω–∏–π —á–∞—Å: ${now.toLocaleString()}`);
      console.log(`   –ß–∞—Å –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è: ${reminderDateTime.toLocaleString()}`);
      console.log(`   –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á: ${reminder.user_id}`);
      
      // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è —â–µ –∞–∫—Ç—É–∞–ª—å–Ω–µ
      if (now >= reminderDateTime) {
        const message = `‚è∞ –ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è!\n\n${reminder.message}\n\nüìÖ –î–∞—Ç–∞: ${reminder.reminder_date}\n‚è∞ –ß–∞—Å: ${reminder.reminder_time}`;
        
        if (reminder.plan_text) {
          message += `\n\nüìù –ü–ª–∞–Ω:\n${reminder.plan_text}`;
        }
        
        await this.bot.telegram.sendMessage(reminder.user_id, message, {
          reply_markup: {
            inline_keyboard: [
              [{ text: 'üëÅÔ∏è –ü–æ–¥–∏–≤–∏—Ç–∏—Å—è –ø–ª–∞–Ω', callback_data: 'view_plan' }],
              [{ text: '‚úÖ –ü–æ–∑–Ω–∞—á–∏—Ç–∏ –≤–∏–∫–æ–Ω–∞–Ω–∏–º', callback_data: 'mark_completed' }],
              [{ text: 'üîô –ù–∞–∑–∞–¥ –¥–æ –º–µ–Ω—é', callback_data: 'back_to_menu' }]
            ]
          }
        });

        // –ü–æ–∑–Ω–∞—á–∞—î–º–æ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è —è–∫ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–µ
        await this.dbManager.markReminderSent(reminder.id);
        
        console.log(`‚úÖ –ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É ${reminder.user_id}`);
        // –Ø–∫—â–æ –ø–æ–≤—Ç–æ—Ä—é–≤–∞–Ω–µ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è ‚Äî —Å—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤–µ
        if (reminder.repeat_type && reminder.repeat_type !== 'none') {
          const nextDate = this.getNextReminderDate(reminder.reminder_date, reminder.repeat_type);
          if (nextDate) {
            await this.dbManager.createCustomReminder(
              reminder.user_id,
              reminder.plan_id,
              nextDate,
              reminder.reminder_time,
              reminder.message,
              reminder.repeat_type
            );
          }
        }
      } else {
        console.log(`‚è≥ –ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è ${reminder.id} —â–µ –Ω–µ –Ω–∞—Å—Ç–∞–≤ —á–∞—Å`);
      }
    } catch (error) {
      console.error(`‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É ${reminder.user_id}:`, error);
    }
  }

  startAutoCheck() {
    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç—ñ
    this.checkAndSendReminders().catch(console.error);
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑ —ñ–Ω—Ç–µ—Ä–≤–∞–ª–æ–º
    setInterval(async () => {
      try {
        await this.checkAndSendReminders();
      } catch (error) {
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –∞–≤—Ç–æ-–ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –Ω–∞–≥–∞–¥—É–≤–∞–Ω—å:', error);
      }
    }, REMINDER_CHECK_INTERVAL_SECONDS * 1000);
  }

  getNextReminderDate(currentDate, repeatType) {
    const date = new Date(currentDate);
    switch (repeatType) {
      case 'daily':
        date.setDate(date.getDate() + 1);
        break;
      case 'weekly':
        date.setDate(date.getDate() + 7);
        break;
      case 'monthly':
        date.setMonth(date.getMonth() + 1);
        break;
      default:
        return null;
    }
    return date.toISOString().slice(0, 10);
  }
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é
async function createMainMenu(userId) {
  const isAdmin = checkIfAdmin(userId);
  
  const buttons = [
    [Markup.button.callback('üìã –î–æ–ø–æ–º–æ–≥–∞', 'help')],
    [Markup.button.callback('‚ÑπÔ∏è –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è', 'info')],
    [Markup.button.callback('üìù –ü–ª–∞–Ω –Ω–∞ –∑–∞–≤—Ç—Ä–∞', 'tomorrow_plan')],
    [Markup.button.callback('üí± –ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä –≤–∞–ª—é—Ç', 'currency_converter')],
    [Markup.button.callback('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', 'statistics')],
    [Markup.button.callback('‚è∞ –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –Ω–∞–≥–∞–¥—É–≤–∞–Ω—å', 'reminder_settings')]
  ];
  
  // –î–æ–¥–∞—î–º–æ –∫–Ω–æ–ø–∫—É –∞–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—ñ —Ç—ñ–ª—å–∫–∏ –¥–ª—è –∞–¥–º—ñ–Ω—ñ–≤
  if (isAdmin) {
    // –û—Ç—Ä–∏–º—É—î–º–æ –ø—É–±–ª—ñ—á–Ω—É URL –∑ ngrok
    const ngrokUrl = await getNgrokUrl();
    const adminUrl = ngrokUrl || process.env.ADMIN_URL || 'http://localhost:3000';
    
    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ URL –≤–∞–ª—ñ–¥–Ω–∏–π –¥–ª—è Telegram (HTTPS –∞–±–æ –ø—É–±–ª—ñ—á–Ω–∏–π –¥–æ–º–µ–Ω)
    if (adminUrl.startsWith('https://') || adminUrl.includes('ngrok.io')) {
      buttons.push([Markup.button.url('üõ°Ô∏è –ê–¥–º—ñ–Ω –ø–∞–Ω–µ–ª—å', adminUrl)]);
      console.log(`üîó –ê–¥–º—ñ–Ω –ø–∞–Ω–µ–ª—å –¥–æ—Å—Ç—É–ø–Ω–∞ –∑–∞ URL: ${adminUrl}`);
    } else {
      buttons.push([Markup.button.callback('üõ°Ô∏è –ê–¥–º—ñ–Ω –ø–∞–Ω–µ–ª—å', 'admin_panel')]);
      console.log('‚ö†Ô∏è –ê–¥–º—ñ–Ω –ø–∞–Ω–µ–ª—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ —á–µ—Ä–µ–∑ ngrok, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è callback');
    }
  }
  
  return Markup.inlineKeyboard(buttons);
}

// –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –∞–¥–º—ñ–Ω
function checkIfAdmin(userId) {
  // –ü–æ–∫–∏ —â–æ –≤—Å—ñ –∞–¥–º—ñ–Ω–∏ (–º–æ–∂–Ω–∞ –∑–º—ñ–Ω–∏—Ç–∏ –ª–æ–≥—ñ–∫—É)
  return true;
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –¥–∞—Ç–∏
function formatDate(dateString) {
  if (!dateString) return '–ù–µ–≤—ñ–¥–æ–º–æ';
  
  const date = new Date(dateString);
  if (isNaN(date.getTime())) {
    return '–ù–µ–≤—ñ–¥–æ–º–æ';
  }
  
  return date.toLocaleDateString('uk-UA', {
    year: 'numeric',
    month: 'long',
    day: 'numeric'
  });
}

// –û–±—Ä–æ–±–∫–∞ –∫–æ–º–∞–Ω–¥–∏ /start (–∑–∞–ª–∏—à–∞—î–º–æ –¥–ª—è —Å—É–º—ñ—Å–Ω–æ—Å—Ç—ñ)
bot.start(async (ctx) => {
  await showMainMenuForNewSession(ctx);
});

// –û–ø—Ç–∏–º—ñ–∑–æ–≤–∞–Ω–∏–π –æ–±—Ä–æ–±–Ω–∏–∫ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
bot.on('message', async (ctx) => {
  try {
    const state = userStates.get(ctx.from.id);
    
    // –û–Ω–æ–≤–ª—é—î–º–æ –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    userActivityTracker.set(ctx.from.id, Date.now());
    
    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —Ü–µ –Ω–æ–≤–∞ —Å–µ—Å—ñ—è
    if (isNewSession(ctx.from.id)) {
      console.log(`üîÑ –ù–æ–≤–∞ —Å–µ—Å—ñ—è –≤–∏—è–≤–ª–µ–Ω–∞ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ ${ctx.from.id}`);
      await clearChatForNewSession(ctx);
      trackUserSession(ctx.from.id);
      await showMainMenuForNewSession(ctx);
      return;
    }
    
    // –û–±—Ä–æ–±–ª—è—î–º–æ —Ä—ñ–∑–Ω—ñ —Å—Ç–∞–Ω–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    if (state && state.waitingForPlan) {
      await handlePlanInput(ctx);
    } else if (state && state.waitingForReminderTime) {
      await handleReminderTimeInput(ctx);
    } else if (state && state.creatingReminder && state.step === 'entering_message') {
      await handleReminderMessageInput(ctx);
    } else if (state && state.convertingCurrency && state.step === 'entering_amount') {
      await handleCurrencyAmountInput(ctx);
    } else if (state && state.enteringAmountForRates) {
      await handleRatesAmountInput(ctx);
    } else {
      // –Ø–∫—â–æ —Ü–µ –∑–≤–∏—á–∞–π–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –≤ –∞–∫—Ç–∏–≤–Ω–æ–º—É —Å—Ç–∞–Ω—ñ, –ø–æ–∫–∞–∑—É—î–º–æ –º–µ–Ω—é
      await showMainMenu(ctx);
    }
  } catch (error) {
    console.error('–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:', error);
  }
});

// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –º–µ–Ω—é
bot.command('menu', async (ctx) => {
  await showMainMenu(ctx);
});

// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ—á–∏—â–µ–Ω–Ω—è —á–∞—Ç—É (–ø–æ–≤–Ω–µ –æ—á–∏—â–µ–Ω–Ω—è)
bot.command('clear', async (ctx) => {
  try {
    await clearAllUserMessages(ctx);
    
    const menu = await createMainMenu(ctx.from.id);
    const clearMessage = await ctx.reply(
      'üßπ –ß–∞—Ç –ø–æ–≤–Ω—ñ—Å—Ç—é –æ—á–∏—â–µ–Ω–æ!\n\nüí° –¢–µ–ø–µ—Ä —á–∞—Ç —á–∏—Å—Ç–∏–π —ñ –∑—Ä—É—á–Ω–∏–π –¥–ª—è –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó.',
      menu
    );
    
    // –í—ñ–¥—Å—Ç–µ–∂—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    trackMessage(ctx.from.id, clearMessage.message_id);
    
    console.log(`üßπ –ü–æ–≤–Ω–µ –æ—á–∏—â–µ–Ω–Ω—è —á–∞—Ç—É –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ ${ctx.from.id}`);
    
  } catch (error) {
    console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—á–∏—â–µ–Ω–Ω—ñ —á–∞—Ç—É:', error);
  }
});

// –ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä –≤–∞–ª—é—Ç
bot.action('currency_converter', async (ctx) => {
  try {
    await dbManager.updateUserActivity(ctx.from.id);
    
    const buttons = [
      [Markup.button.callback('üí± –ö–æ–Ω–≤–µ—Ä—Ç—É–≤–∞—Ç–∏ –≤–∞–ª—é—Ç—É', 'convert_currency')],
      [Markup.button.callback('‚ö° –®–≤–∏–¥–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—è', 'quick_convert')],
      [Markup.button.callback('üìä –ö—É—Ä—Å–∏ –≤–∞–ª—é—Ç', 'exchange_rates')],
      [Markup.button.callback('üîÑ –û–Ω–æ–≤–∏—Ç–∏ –∫—É—Ä—Å–∏', 'refresh_rates')],
      [Markup.button.callback('üîô –ù–∞–∑–∞–¥ –¥–æ –º–µ–Ω—é', 'back_to_menu')]
    ];
    
    const menu = Markup.inlineKeyboard(buttons);
    const messageText = 'üí± –ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä –≤–∞–ª—é—Ç:\n\nüí° –û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:\n\nüí± –ö–æ–Ω–≤–µ—Ä—Ç—É–≤–∞—Ç–∏ –≤–∞–ª—é—Ç—É - –∫–æ–Ω–≤–µ—Ä—Ç—É–≤–∞—Ç–∏ –±—É–¥—å-—è–∫—É —Å—É–º—É\n‚ö° –®–≤–∏–¥–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—è - –ø–æ–ø—É–ª—è—Ä–Ω—ñ —Å—É–º–∏\nüìä –ö—É—Ä—Å–∏ –≤–∞–ª—é—Ç - –ø–æ–¥–∏–≤–∏—Ç–∏—Å—è –ø–æ—Ç–æ—á–Ω—ñ –∫—É—Ä—Å–∏\nüîÑ –û–Ω–æ–≤–∏—Ç–∏ –∫—É—Ä—Å–∏ - –æ–Ω–æ–≤–∏—Ç–∏ –∫—É—Ä—Å–∏ –≤—ñ–¥ –ù–ë–£';
    
    try {
      await ctx.editMessageText(messageText, menu);
    } catch (editError) {
      // –Ø–∫—â–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–µ –∑–º—ñ–Ω–∏–ª–æ—Å—è, –ø—Ä–æ—Å—Ç–æ —ñ–≥–Ω–æ—Ä—É—î–º–æ –ø–æ–º–∏–ª–∫—É
      if (editError.description && editError.description.includes('message is not modified')) {
        console.log(`‚ÑπÔ∏è –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–µ –∑–º—ñ–Ω–∏–ª–æ—Å—è –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ ${ctx.from.id}`);
        return;
      }
      throw editError;
    }
    
    // –í—ñ–¥—Å—Ç–µ–∂—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    trackMessage(ctx.from.id, ctx.callbackQuery.message.message_id);
    
    console.log(`üí± –ü–æ–∫–∞–∑–∞–Ω–æ –∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä –≤–∞–ª—é—Ç –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ ${ctx.from.id}`);
    
  } catch (error) {
    console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑—ñ –∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä–∞ –≤–∞–ª—é—Ç:', error);
  }
});

// –®–≤–∏–¥–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—è
bot.action('quick_convert', async (ctx) => {
  try {
    await dbManager.updateUserActivity(ctx.from.id);
    
    const buttons = [
      [Markup.button.callback('üí∞ 100 USD', 'quick_100_usd')],
      [Markup.button.callback('üí∞ 1000 USD', 'quick_1000_usd')],
      [Markup.button.callback('üí∞ 100 EUR', 'quick_100_eur')],
      [Markup.button.callback('üí∞ 1000 EUR', 'quick_1000_eur')],
      [Markup.button.callback('üí∞ 1000 UAH', 'quick_1000_uah')],
      [Markup.button.callback('üí∞ 10000 UAH', 'quick_10000_uah')],
      [Markup.button.callback('üîô –ù–∞–∑–∞–¥ –¥–æ –∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä–∞', 'currency_converter')]
    ];
    
    const menu = Markup.inlineKeyboard(buttons);
    await safeEditMessage(ctx,
      '‚ö° –®–≤–∏–¥–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—è:\n\nüí° –û–±–µ—Ä—ñ—Ç—å –ø–æ–ø—É–ª—è—Ä–Ω—É —Å—É–º—É –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—ó:',
      menu
    );
  } catch (error) {
    console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —à–≤–∏–¥–∫—ñ–π –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—ó:', error);
  }
});

// –û–±—Ä–æ–±–∫–∞ —à–≤–∏–¥–∫–æ—ó –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—ó
bot.action(/quick_(\d+)_(.+)/, async (ctx) => {
  try {
    await dbManager.updateUserActivity(ctx.from.id);
    
    const amount = parseInt(ctx.match[1]);
    const currency = ctx.match[2].toUpperCase();
    
    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –≤–∞–ª—é—Ç–∞ –ø—ñ–¥—Ç—Ä–∏–º—É—î—Ç—å—Å—è
    if (!currencyConverter.isSupported(currency)) {
      await safeEditMessage(ctx,
        `‚ùå –í–∞–ª—é—Ç–∞ ${currency} –Ω–µ –ø—ñ–¥—Ç—Ä–∏–º—É—î—Ç—å—Å—è.`,
        Markup.inlineKeyboard([[Markup.button.callback('üîô –ù–∞–∑–∞–¥ –¥–æ —à–≤–∏–¥–∫–æ—ó –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—ó', 'quick_convert')]])
      );
      return;
    }
    
    // –ü–æ–∫–∞–∑—É—î–º–æ –∫—É—Ä—Å–∏ –¥–ª—è –æ–±—Ä–∞–Ω–æ—ó —Å—É–º–∏
    const message = currencyConverter.formatExchangeRatesForCurrency(currency, amount);
    
    const buttons = [
      [Markup.button.callback('üí± –ö–æ–Ω–≤–µ—Ä—Ç—É–≤–∞—Ç–∏ —ñ–Ω—à—É —Å—É–º—É', 'convert_currency')],
      [Markup.button.callback('üìä –ö—É—Ä—Å–∏ –≤–∞–ª—é—Ç', 'exchange_rates')],
      [Markup.button.callback('üîô –ù–∞–∑–∞–¥ –¥–æ –∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä–∞', 'currency_converter')]
    ];
    
    const menu = Markup.inlineKeyboard(buttons);
    await safeEditMessage(ctx, message, menu);
    
    console.log(`‚ö° –®–≤–∏–¥–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—è: ${amount} ${currency} –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ ${ctx.from.id}`);
    
  } catch (error) {
    console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —à–≤–∏–¥–∫—ñ–π –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—ó:', error);
  }
});

// –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—è –≤–∞–ª—é—Ç
bot.action('convert_currency', async (ctx) => {
  try {
    await dbManager.updateUserActivity(ctx.from.id);
    
    // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Å—Ç–∞–Ω –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    userStates.set(ctx.from.id, { 
      convertingCurrency: true,
      step: 'entering_amount'
    });
    
    const buttons = [
      [Markup.button.callback('üîô –ù–∞–∑–∞–¥ –¥–æ –∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä–∞', 'currency_converter')]
    ];
    
    const menu = Markup.inlineKeyboard(buttons);
    await safeEditMessage(ctx,
      'üí± –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—è –≤–∞–ª—é—Ç:\n\nüí∞ –í–≤–µ–¥—ñ—Ç—å —Å—É–º—É –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—ó:\n\nüí° –ù–∞–ø—Ä–∏–∫–ª–∞–¥: 100',
      menu
    );
  } catch (error) {
    console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—ó –≤–∞–ª—é—Ç:', error);
  }
});

// –ö—É—Ä—Å–∏ –≤–∞–ª—é—Ç
bot.action('exchange_rates', async (ctx) => {
  try {
    await dbManager.updateUserActivity(ctx.from.id);
    
    const rates = currencyConverter.getExchangeRates();
    const currencies = currencyConverter.getCurrencies();
    
    if (rates.size > 0) {
      // –ü–æ–∫–∞–∑—É—î–º–æ –∫—É—Ä—Å–∏ –¥–ª—è 100 USD –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º
      const message = currencyConverter.formatExchangeRatesForAmount(100);
      
      const buttons = [
        [Markup.button.callback('üí∞ –í–≤–µ—Å—Ç–∏ —Å—É–º—É', 'enter_amount_for_rates')],
        [Markup.button.callback('üè¶ –ó–º—ñ–Ω–∏—Ç–∏ –±–∞–∑–æ–≤—É –≤–∞–ª—é—Ç—É', 'select_base_currency')],
        [Markup.button.callback('üîÑ –û–Ω–æ–≤–∏—Ç–∏ –∫—É—Ä—Å–∏', 'refresh_rates')],
        [Markup.button.callback('üîô –ù–∞–∑–∞–¥ –¥–æ –∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä–∞', 'currency_converter')]
      ];
      
      const menu = Markup.inlineKeyboard(buttons);
      await safeEditMessage(ctx, message, menu);
    } else {
      await safeEditMessage(ctx,
        '‚ùå –ö—É—Ä—Å–∏ –≤–∞–ª—é—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ñ. –°–ø—Ä–æ–±—É–π—Ç–µ –æ–Ω–æ–≤–∏—Ç–∏ –∫—É—Ä—Å–∏.',
        Markup.inlineKeyboard([[Markup.button.callback('üîô –ù–∞–∑–∞–¥ –¥–æ –∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä–∞', 'currency_converter')]])
      );
    }
  } catch (error) {
    console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑—ñ –∫—É—Ä—Å—ñ–≤ –≤–∞–ª—é—Ç:', error);
  }
});

// –í–∏–±—ñ—Ä –±–∞–∑–æ–≤–æ—ó –≤–∞–ª—é—Ç–∏ –¥–ª—è –∫—É—Ä—Å—ñ–≤
bot.action('select_base_currency', async (ctx) => {
  try {
    await dbManager.updateUserActivity(ctx.from.id);
    
    // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Å—Ç–∞–Ω –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    userStates.set(ctx.from.id, { 
      selectingBaseCurrency: true,
      step: 'selecting_currency'
    });
    
    const buttons = createCurrencyButtons('base_currency', null);
    buttons.push([Markup.button.callback('üîô –ù–∞–∑–∞–¥ –¥–æ –∫—É—Ä—Å—ñ–≤', 'exchange_rates')]);
    
    const menu = Markup.inlineKeyboard(buttons);
    await safeEditMessage(ctx,
      'üè¶ –û–±–µ—Ä—ñ—Ç—å –±–∞–∑–æ–≤—É –≤–∞–ª—é—Ç—É –¥–ª—è –∫—É—Ä—Å—ñ–≤:\n\nüí° –ö—É—Ä—Å–∏ –±—É–¥—É—Ç—å –ø–æ–∫–∞–∑–∞–Ω—ñ –≤—ñ–¥–Ω–æ—Å–Ω–æ –æ–±—Ä–∞–Ω–æ—ó –≤–∞–ª—é—Ç–∏',
      menu
    );
  } catch (error) {
    console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–±–æ—Ä—ñ –±–∞–∑–æ–≤–æ—ó –≤–∞–ª—é—Ç–∏:', error);
  }
});

// –û–±—Ä–æ–±–∫–∞ –≤–∏–±–æ—Ä—É –±–∞–∑–æ–≤–æ—ó –≤–∞–ª—é—Ç–∏
bot.action(/base_currency_(.+)/, async (ctx) => {
  try {
    await dbManager.updateUserActivity(ctx.from.id);
    
    const selectedCurrency = ctx.match[1];
    const userState = userStates.get(ctx.from.id);
    
    if (userState && userState.selectingBaseCurrency) {
      // –û—á–∏—â–∞—î–º–æ —Å—Ç–∞–Ω
      userStates.delete(ctx.from.id);
      
      // –ü–æ–∫–∞–∑—É—î–º–æ –∫—É—Ä—Å–∏ –¥–ª—è –æ–±—Ä–∞–Ω–æ—ó –≤–∞–ª—é—Ç–∏ (100 –æ–¥–∏–Ω–∏—Ü—å)
      const message = currencyConverter.formatExchangeRatesForCurrency(selectedCurrency, 100);
      
      const buttons = [
        [Markup.button.callback('üí∞ –í–≤–µ—Å—Ç–∏ —Å—É–º—É', 'enter_amount_for_rates')],
        [Markup.button.callback('üè¶ –ó–º—ñ–Ω–∏—Ç–∏ –±–∞–∑–æ–≤—É –≤–∞–ª—é—Ç—É', 'select_base_currency')],
        [Markup.button.callback('üîÑ –û–Ω–æ–≤–∏—Ç–∏ –∫—É—Ä—Å–∏', 'refresh_rates')],
        [Markup.button.callback('üîô –ù–∞–∑–∞–¥ –¥–æ –∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä–∞', 'currency_converter')]
      ];
      
      const menu = Markup.inlineKeyboard(buttons);
      await safeEditMessage(ctx, message, menu);
      
      console.log(`üè¶ –ó–º—ñ–Ω–µ–Ω–æ –±–∞–∑–æ–≤—É –≤–∞–ª—é—Ç—É –Ω–∞ ${selectedCurrency} –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ ${ctx.from.id}`);
    }
  } catch (error) {
    console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–±–æ—Ä—ñ –±–∞–∑–æ–≤–æ—ó –≤–∞–ª—é—Ç–∏:', error);
  }
});

// –í–≤–µ–¥–µ–Ω–Ω—è —Å—É–º–∏ –¥–ª—è –∫—É—Ä—Å—ñ–≤
bot.action('enter_amount_for_rates', async (ctx) => {
  try {
    await dbManager.updateUserActivity(ctx.from.id);
    
    // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Å—Ç–∞–Ω –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    userStates.set(ctx.from.id, { 
      enteringAmountForRates: true,
      step: 'entering_amount'
    });
    
    const buttons = [
      [Markup.button.callback('üîô –ù–∞–∑–∞–¥ –¥–æ –∫—É—Ä—Å—ñ–≤', 'exchange_rates')]
    ];
    
    const menu = Markup.inlineKeyboard(buttons);
    await safeEditMessage(ctx,
      'üí∞ –í–≤–µ–¥—ñ—Ç—å —Å—É–º—É –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É –∫—É—Ä—Å—ñ–≤:\n\nüí° –ù–∞–ø—Ä–∏–∫–ª–∞–¥: 100, 1000, 50.5\n\nüí± –ö—É—Ä—Å–∏ –±—É–¥—É—Ç—å –ø–æ–∫–∞–∑–∞–Ω—ñ –≤—ñ–¥–Ω–æ—Å–Ω–æ USD',
      menu
    );
  } catch (error) {
    console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–≤–µ–¥–µ–Ω–Ω—ñ —Å—É–º–∏ –¥–ª—è –∫—É—Ä—Å—ñ–≤:', error);
  }
});

// –û–Ω–æ–≤–ª–µ–Ω–Ω—è –∫—É—Ä—Å—ñ–≤
bot.action('refresh_rates', async (ctx) => {
  try {
    await dbManager.updateUserActivity(ctx.from.id);
    
    await safeEditMessage(ctx, 'üîÑ –û–Ω–æ–≤–ª–µ–Ω–Ω—è –∫—É—Ä—Å—ñ–≤ –≤–∞–ª—é—Ç...');
    
    await currencyConverter.updateExchangeRates();
    
    const buttons = [
      [Markup.button.callback('üìä –ü–æ–¥–∏–≤–∏—Ç–∏—Å—è –∫—É—Ä—Å–∏', 'exchange_rates')],
      [Markup.button.callback('üîô –ù–∞–∑–∞–¥ –¥–æ –∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä–∞', 'currency_converter')]
    ];
    
    const menu = Markup.inlineKeyboard(buttons);
    await safeEditMessage(ctx,
      '‚úÖ –ö—É—Ä—Å–∏ –≤–∞–ª—é—Ç –æ–Ω–æ–≤–ª–µ–Ω–æ!\n\nüìÖ –û—Å—Ç–∞–Ω–Ω—î –æ–Ω–æ–≤–ª–µ–Ω–Ω—è: ' + 
      (currencyConverter.lastUpdate ? currencyConverter.lastUpdate.toLocaleString('uk-UA') : '–ù–µ–≤—ñ–¥–æ–º–æ'),
      menu
    );
  } catch (error) {
    console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ –∫—É—Ä—Å—ñ–≤:', error);
    await safeEditMessage(ctx,
      '‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ –∫—É—Ä—Å—ñ–≤. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.',
      Markup.inlineKeyboard([[Markup.button.callback('üîô –ù–∞–∑–∞–¥ –¥–æ –∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä–∞', 'currency_converter')]])
    );
  }
});

// –û–±—Ä–æ–±–∫–∞ –Ω–∞—Ç–∏—Å–∫–∞–Ω—å –∫–Ω–æ–ø–æ–∫
bot.action('help', async (ctx) => {
  try {
    await dbManager.updateUserActivity(ctx.from.id);
    
    const helpMessage = await ctx.editMessageText(
      'üìã –î–æ–ø–æ–º–æ–≥–∞:\n\n/start - –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é\n/menu - –û–Ω–æ–≤–∏—Ç–∏ –º–µ–Ω—é\n/clear - –û—á–∏—Å—Ç–∏—Ç–∏ —á–∞—Ç\n/help - –¶—è –¥–æ–≤—ñ–¥–∫–∞\n/info - –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –±–æ—Ç–∞\n/tomorrow_plan - –ü–ª–∞–Ω –Ω–∞ –∑–∞–≤—Ç—Ä–∞\n/currency_converter - –ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä –≤–∞–ª—é—Ç\n/statistics - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n/reminder_settings - –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –Ω–∞–≥–∞–¥—É–≤–∞–Ω—å',
      Markup.inlineKeyboard([[Markup.button.callback('üîô –ù–∞–∑–∞–¥ –¥–æ –º–µ–Ω—é', 'back_to_menu')]])
    );
    
    // –í—ñ–¥—Å—Ç–µ–∂—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    trackMessage(ctx.from.id, helpMessage.message_id);
    
    console.log(`üìã –ü–æ–∫–∞–∑–∞–Ω–æ –¥–æ–ø–æ–º–æ–≥—É –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ ${ctx.from.id}`);
    
  } catch (error) {
    console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑—ñ –¥–æ–ø–æ–º–æ–≥–∏:', error);
  }
});

bot.action('info', async (ctx) => {
  try {
    await dbManager.updateUserActivity(ctx.from.id);
    
    const infoMessage = await ctx.editMessageText(
      '‚ÑπÔ∏è –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è:\n\nü§ñ –í–µ—Ä—Å—ñ—è: 4.0.0\nüìÖ –°—Ç–≤–æ—Ä–µ–Ω–æ: 2024\nüíª –¢–µ—Ö–Ω–æ–ª–æ–≥—ñ—ó: Node.js, Telegraf, SQLite\nüóÑÔ∏è –ë–∞–∑–∞ –¥–∞–Ω–∏—Ö: –ü–æ–∫—Ä–∞—â–µ–Ω–∞ —Å–∏—Å—Ç–µ–º–∞ –∑ –º—ñ–≥—Ä–∞—Ü—ñ—è–º–∏\n‚è∞ –ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è: –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è\nüí± –ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä: –†–µ–∞–ª—å–Ω—ñ –∫—É—Ä—Å–∏ –≤—ñ–¥ –ù–ë–£\nüßπ –ß–∞—Ç: –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –æ—á–∏—â–µ–Ω–Ω—è –ø—Ä–∏ –Ω–æ–≤–∏—Ö —Å–µ—Å—ñ—è—Ö',
      Markup.inlineKeyboard([[Markup.button.callback('üîô –ù–∞–∑–∞–¥ –¥–æ –º–µ–Ω—é', 'back_to_menu')]])
    );
    
    // –í—ñ–¥—Å—Ç–µ–∂—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    trackMessage(ctx.from.id, infoMessage.message_id);
    
    console.log(`‚ÑπÔ∏è –ü–æ–∫–∞–∑–∞–Ω–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ ${ctx.from.id}`);
    
  } catch (error) {
    console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑—ñ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó:', error);
  }
});

// –û–±—Ä–æ–±–∫–∞ –∫–Ω–æ–ø–∫–∏ –∞–¥–º—ñ–Ω –ø–∞–Ω–µ–ª—ñ
bot.action('admin_panel', async (ctx) => {
  try {
    const userId = ctx.from.id;
    
    if (!checkIfAdmin(userId)) {
      await ctx.answerCbQuery('‚ùå –î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ!');
      return;
    }
    
    // –û—Ç—Ä–∏–º—É—î–º–æ –ø—É–±–ª—ñ—á–Ω—É URL –∑ ngrok
    const ngrokUrl = await getNgrokUrl();
    const adminUrl = ngrokUrl || process.env.ADMIN_URL || 'http://localhost:3000';
    
    if (adminUrl.startsWith('https://') || adminUrl.includes('ngrok.io')) {
      await ctx.answerCbQuery('üîó –í—ñ–¥–∫—Ä–∏–≤–∞—é –∞–¥–º—ñ–Ω –ø–∞–Ω–µ–ª—å...');
      
      // –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º
      await ctx.reply(
        `üõ°Ô∏è **–ê–¥–º—ñ–Ω –ø–∞–Ω–µ–ª—å**\n\nüîó [–í—ñ–¥–∫—Ä–∏—Ç–∏ –∞–¥–º—ñ–Ω –ø–∞–Ω–µ–ª—å](${adminUrl})\n\nüîë **–ü–∞—Ä–æ–ª—å:** admin123\n\nüí° –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –Ω–∞ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –≤–∏—â–µ –¥–ª—è –¥–æ—Å—Ç—É–ø—É –¥–æ –∞–¥–º—ñ–Ω –ø–∞–Ω–µ–ª—ñ.`,
        {
          parse_mode: 'Markdown',
          disable_web_page_preview: true,
          reply_markup: {
            inline_keyboard: [
              [Markup.button.url('üõ°Ô∏è –í—ñ–¥–∫—Ä–∏—Ç–∏ –∞–¥–º—ñ–Ω –ø–∞–Ω–µ–ª—å', adminUrl)],
              [Markup.button.callback('üîô –ù–∞–∑–∞–¥ –¥–æ –º–µ–Ω—é', 'back_to_menu')]
            ]
          }
        }
      );
    } else {
      await ctx.answerCbQuery('‚ö†Ô∏è –ê–¥–º—ñ–Ω –ø–∞–Ω–µ–ª—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ —á–µ—Ä–µ–∑ ngrok');
      await ctx.reply(
        '‚ö†Ô∏è **–ê–¥–º—ñ–Ω –ø–∞–Ω–µ–ª—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞**\n\nüîß –ü–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—è, —â–æ:\n‚Ä¢ Ngrok –∑–∞–ø—É—â–µ–Ω–∏–π\n‚Ä¢ –ê–¥–º—ñ–Ω –ø–∞–Ω–µ–ª—å –ø—Ä–∞—Ü—é—î\n‚Ä¢ –ü–æ—Ä—Ç 4040 –¥–æ—Å—Ç—É–ø–Ω–∏–π\n\nüí° –°–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–ø—É—Å—Ç–∏—Ç–∏: `python3 start_admin_with_ngrok.py`',
        {
          parse_mode: 'Markdown',
          reply_markup: {
            inline_keyboard: [
              [Markup.button.callback('üîÑ –°–ø—Ä–æ–±—É–≤–∞—Ç–∏ –∑–Ω–æ–≤—É', 'admin_panel')],
              [Markup.button.callback('üîô –ù–∞–∑–∞–¥ –¥–æ –º–µ–Ω—é', 'back_to_menu')]
            ]
          }
        }
      );
    }
    
  } catch (error) {
    console.error('–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –∞–¥–º—ñ–Ω –ø–∞–Ω–µ–ª—ñ:', error);
    await ctx.answerCbQuery('‚ùå –ü–æ–º–∏–ª–∫–∞ –¥–æ—Å—Ç—É–ø—É –¥–æ –∞–¥–º—ñ–Ω –ø–∞–Ω–µ–ª—ñ');
  }
});

// –û–±—Ä–æ–±–∫–∞ –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ –º–µ–Ω—é
bot.action('back_to_menu', async (ctx) => {
  try {
    await clearAllUserMessages(ctx);
    await showMainMenu(ctx);
  } catch (error) {
    console.error('–ü–æ–º–∏–ª–∫–∞ –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ –º–µ–Ω—é:', error);
  }
});

// –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –Ω–∞–≥–∞–¥—É–≤–∞–Ω—å
bot.action('reminder_settings', async (ctx) => {
  try {
    await dbManager.updateUserActivity(ctx.from.id);
    
    // –û—á–∏—â–∞—î–º–æ —á–∞—Ç –ø—Ä–∏ –≤—Ö–æ–¥—ñ –≤ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
    await clearChat(ctx);
    
    const settings = await dbManager.getUserReminderSettings(ctx.from.id);
    const status = settings.reminder_enabled ? '‚úÖ –£–≤—ñ–º–∫–Ω–µ–Ω–æ' : '‚ùå –í–∏–º–∫–Ω–µ–Ω–æ';
    
    const buttons = [
      [Markup.button.callback(settings.reminder_enabled ? '‚ùå –í–∏–º–∫–Ω—É—Ç–∏ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è' : '‚úÖ –£–≤—ñ–º–∫–Ω—É—Ç–∏ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è', 'toggle_reminder')],
      [Markup.button.callback('üïê –ó–º—ñ–Ω–∏—Ç–∏ —á–∞—Å –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è', 'change_reminder_time')],
      [Markup.button.callback('üìÖ –°—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è', 'create_reminder')],
      [Markup.button.callback('üìã –ú–æ—ó –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è', 'my_reminders')],
      [Markup.button.callback('üîô –ù–∞–∑–∞–¥ –¥–æ –º–µ–Ω—é', 'back_to_menu')]
    ];
    
    const menu = Markup.inlineKeyboard(buttons);
    const reminderMessage = await ctx.editMessageText(
      `‚è∞ –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –Ω–∞–≥–∞–¥—É–≤–∞–Ω—å:\n\n${status}\nüïê –ß–∞—Å –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è: ${settings.reminder_time}\n\nüí° –ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –≤—ñ–¥–ø—Ä–∞–≤–ª—è—é—Ç—å—Å—è —â–æ–¥–Ω—è –æ –≤–∫–∞–∑–∞–Ω–∏–π —á–∞—Å, —è–∫—â–æ —É –≤–∞—Å —î –ø–ª–∞–Ω–∏ –Ω–∞ –∑–∞–≤—Ç—Ä–∞.`,
      menu
    );
    
    // –û—á–∏—â–∞—î–º–æ —Å—Ç–∞—Ä—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥
    setTimeout(async () => {
      await clearBotMessages(ctx, reminderMessage.message_id);
    }, 10000);
    
  } catch (error) {
    console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å –Ω–∞–≥–∞–¥—É–≤–∞–Ω—å:', error);
  }
});

// –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è
bot.action('create_reminder', async (ctx) => {
  try {
    await dbManager.updateUserActivity(ctx.from.id);
    
    // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Å—Ç–∞–Ω –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    userStates.set(ctx.from.id, { 
      creatingReminder: true,
      step: 'selecting_date'
    });
    
    const dates = dbManager.generateCalendarDates();
    const buttons = [];
    
    // –°—Ç–≤–æ—Ä—é—î–º–æ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –¥–∞—Ç (–ø–æ 3 –≤ —Ä—è–¥)
    for (let i = 0; i < dates.length; i += 3) {
      const row = [];
      for (let j = 0; j < 3 && i + j < dates.length; j++) {
        const date = dates[i + j];
        const label = date.isToday ? 'üìÖ –°—å–æ–≥–æ–¥–Ω—ñ' : 
                     date.isTomorrow ? 'üìÖ –ó–∞–≤—Ç—Ä–∞' : 
                     date.display;
        row.push(Markup.button.callback(label, `select_date_${date.date}`));
      }
      buttons.push(row);
    }
    
    buttons.push([Markup.button.callback('üîô –ù–∞–∑–∞–¥ –¥–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å', 'reminder_settings')]);
    
    const menu = Markup.inlineKeyboard(buttons);
    await ctx.editMessageText(
      'üìÖ –û–±–µ—Ä—ñ—Ç—å –¥–∞—Ç—É –¥–ª—è –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è:\n\nüí° –í–∏–±–µ—Ä—ñ—Ç—å –¥–∞—Ç—É, –∫–æ–ª–∏ —Ö–æ—á–µ—Ç–µ –æ—Ç—Ä–∏–º–∞—Ç–∏ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è.',
      menu
    );
  } catch (error) {
    console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è:', error);
  }
});

// –û–±—Ä–æ–±–∫–∞ –≤–∏–±–æ—Ä—É –¥–∞—Ç–∏
bot.action(/select_date_(.+)/, async (ctx) => {
  try {
    await dbManager.updateUserActivity(ctx.from.id);
    
    const selectedDate = ctx.match[1];
    const userState = userStates.get(ctx.from.id);
    
    if (userState && userState.creatingReminder) {
      userState.selectedDate = selectedDate;
      userState.step = 'selecting_time';
      
      const timeSlots = dbManager.generateTimeSlots();
      const buttons = [];
      
      // –°—Ç–≤–æ—Ä—é—î–º–æ –∫–Ω–æ–ø–∫–∏ –¥–ª—è —á–∞—Å—É (–ø–æ 4 –≤ —Ä—è–¥)
      for (let i = 0; i < timeSlots.length; i += 4) {
        const row = [];
        for (let j = 0; j < 4 && i + j < timeSlots.length; j++) {
          const timeSlot = timeSlots[i + j];
          row.push(Markup.button.callback(timeSlot.display, `select_time_${timeSlot.time}`));
        }
        buttons.push(row);
      }
      
      buttons.push([Markup.button.callback('üîô –ù–∞–∑–∞–¥ –¥–æ –≤–∏–±–æ—Ä—É –¥–∞—Ç–∏', 'create_reminder')]);
      
      const menu = Markup.inlineKeyboard(buttons);
      await ctx.editMessageText(
        `üïê –û–±–µ—Ä—ñ—Ç—å —á–∞—Å –¥–ª—è –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –Ω–∞ ${selectedDate}:\n\nüí° –í–∏–±–µ—Ä—ñ—Ç—å —á–∞—Å, –∫–æ–ª–∏ —Ö–æ—á–µ—Ç–µ –æ—Ç—Ä–∏–º–∞—Ç–∏ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è.`,
        menu
      );
    }
  } catch (error) {
    console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–±–æ—Ä—ñ –¥–∞—Ç–∏:', error);
  }
});

// –û–±—Ä–æ–±–∫–∞ –≤–∏–±–æ—Ä—É —á–∞—Å—É
bot.action(/select_time_(.+)/, async (ctx) => {
  try {
    await dbManager.updateUserActivity(ctx.from.id);
    
    const selectedTime = ctx.match[1];
    const userState = userStates.get(ctx.from.id);
    
    if (userState && userState.creatingReminder && userState.selectedDate) {
      userState.selectedTime = selectedTime;
      userState.step = 'entering_message';
      
      const buttons = [
        [Markup.button.callback('üîô –ù–∞–∑–∞–¥ –¥–æ –≤–∏–±–æ—Ä—É —á–∞—Å—É', `select_date_${userState.selectedDate}`)]
      ];
      
      const menu = Markup.inlineKeyboard(buttons);
      await ctx.editMessageText(
        `üìù –í–≤–µ–¥—ñ—Ç—å —Ç–µ–∫—Å—Ç –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è:\n\nüìÖ –î–∞—Ç–∞: ${userState.selectedDate}\nüïê –ß–∞—Å: ${selectedTime}\n\nüí° –ù–∞–ø–∏—à—ñ—Ç—å —â–æ —Å–∞–º–µ –Ω–∞–≥–∞–¥—É–≤–∞—Ç–∏.`,
        menu
      );
    }
  } catch (error) {
    console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–±–æ—Ä—ñ —á–∞—Å—É:', error);
  }
});

// –ú–æ—ó –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è
bot.action('my_reminders', async (ctx) => {
  try {
    await dbManager.updateUserActivity(ctx.from.id);
    
    const reminders = await dbManager.getUserReminders(ctx.from.id);
    
    if (reminders.length > 0) {
      let message = 'üìã –í–∞—à—ñ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è:\n\n';
      
      reminders.forEach((reminder, index) => {
        const status = reminder.sent ? '‚úÖ –í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ' : '‚è≥ –û—á—ñ–∫—É—î';
        const date = formatDate(reminder.reminder_date);
        message += `${index + 1}. ${date} –æ ${reminder.reminder_time}\n`;
        message += `   ${status}\n`;
        message += `   üìù ${reminder.message}\n\n`;
      });
      
      const buttons = [
        [Markup.button.callback('üóëÔ∏è –í–∏–¥–∞–ª–∏—Ç–∏ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è', 'delete_reminder_menu')],
        [Markup.button.callback('üîô –ù–∞–∑–∞–¥ –¥–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å', 'reminder_settings')]
      ];
      
      const menu = Markup.inlineKeyboard(buttons);
      await ctx.editMessageText(message, menu);
    } else {
      await ctx.editMessageText(
        'üìù –£ –≤–∞—Å –ø–æ–∫–∏ –Ω–µ–º–∞—î –Ω–∞–≥–∞–¥—É–≤–∞–Ω—å!\n\nüí° –°—Ç–≤–æ—Ä—ñ—Ç—å —Å–≤–æ—î –ø–µ—Ä—à–µ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è.',
        Markup.inlineKeyboard([[Markup.button.callback('üîô –ù–∞–∑–∞–¥ –¥–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å', 'reminder_settings')]])
      );
    }
  } catch (error) {
    console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –Ω–∞–≥–∞–¥—É–≤–∞–Ω—å:', error);
    await ctx.editMessageText('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –Ω–∞–≥–∞–¥—É–≤–∞–Ω—å. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.');
  }
});

// –ú–µ–Ω—é –≤–∏–¥–∞–ª–µ–Ω–Ω—è –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è
bot.action('delete_reminder_menu', async (ctx) => {
  try {
    await dbManager.updateUserActivity(ctx.from.id);
    
    const reminders = await dbManager.getUserReminders(ctx.from.id);
    
    if (reminders.length > 0) {
      const buttons = [];
      
      reminders.forEach((reminder, index) => {
        const date = formatDate(reminder.reminder_date);
        buttons.push([Markup.button.callback(
          `üóëÔ∏è ${date} –æ ${reminder.reminder_time}`,
          `delete_reminder_${reminder.id}`
        )]);
      });
      
      buttons.push([Markup.button.callback('üîô –ù–∞–∑–∞–¥ –¥–æ –Ω–∞–≥–∞–¥—É–≤–∞–Ω—å', 'my_reminders')]);
      
      const menu = Markup.inlineKeyboard(buttons);
      await ctx.editMessageText(
        'üóëÔ∏è –û–±–µ—Ä—ñ—Ç—å –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è:',
        menu
      );
    } else {
      await ctx.editMessageText(
        'üìù –ù–µ–º–∞—î –Ω–∞–≥–∞–¥—É–≤–∞–Ω—å –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è.',
        Markup.inlineKeyboard([[Markup.button.callback('üîô –ù–∞–∑–∞–¥ –¥–æ –Ω–∞–≥–∞–¥—É–≤–∞–Ω—å', 'my_reminders')]])
      );
    }
  } catch (error) {
    console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑—ñ –º–µ–Ω—é –≤–∏–¥–∞–ª–µ–Ω–Ω—è:', error);
  }
});

// –í–∏–¥–∞–ª–µ–Ω–Ω—è –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è
bot.action(/delete_reminder_(\d+)/, async (ctx) => {
  try {
    await dbManager.updateUserActivity(ctx.from.id);
    
    const reminderId = parseInt(ctx.match[1]);
    const success = await dbManager.deleteReminder(reminderId, ctx.from.id);
    
    if (success) {
      await ctx.editMessageText(
        '‚úÖ –ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –≤–∏–¥–∞–ª–µ–Ω–æ!\n\nüí° –ú–æ–∂–µ—Ç–µ —Å—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤–µ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è.',
        Markup.inlineKeyboard([[Markup.button.callback('üîô –ù–∞–∑–∞–¥ –¥–æ –Ω–∞–≥–∞–¥—É–≤–∞–Ω—å', 'my_reminders')]])
      );
    } else {
      await ctx.editMessageText(
        '‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è.',
        Markup.inlineKeyboard([[Markup.button.callback('üîô –ù–∞–∑–∞–¥ –¥–æ –Ω–∞–≥–∞–¥—É–≤–∞–Ω—å', 'my_reminders')]])
      );
    }
  } catch (error) {
    console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—ñ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è:', error);
    await ctx.editMessageText('‚ùå –ü–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.');
  }
});

// –ü–µ—Ä–µ–º–∏–∫–∞–Ω–Ω—è –Ω–∞–≥–∞–¥—É–≤–∞–Ω—å
bot.action('toggle_reminder', async (ctx) => {
  try {
    await dbManager.updateUserActivity(ctx.from.id);
    
    const settings = await dbManager.getUserReminderSettings(ctx.from.id);
    const newStatus = !settings.reminder_enabled;
    
    await dbManager.updateUserReminderSettings(ctx.from.id, settings.reminder_time, newStatus);
    
    const status = newStatus ? '‚úÖ –£–≤—ñ–º–∫–Ω–µ–Ω–æ' : '‚ùå –í–∏–º–∫–Ω–µ–Ω–æ';
    
    const buttons = [
      [Markup.button.callback(newStatus ? '‚ùå –í–∏–º–∫–Ω—É—Ç–∏ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è' : '‚úÖ –£–≤—ñ–º–∫–Ω—É—Ç–∏ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è', 'toggle_reminder')],
      [Markup.button.callback('üïê –ó–º—ñ–Ω–∏—Ç–∏ —á–∞—Å –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è', 'change_reminder_time')],
      [Markup.button.callback('üìÖ –°—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è', 'create_reminder')],
      [Markup.button.callback('üìã –ú–æ—ó –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è', 'my_reminders')],
      [Markup.button.callback('üîô –ù–∞–∑–∞–¥ –¥–æ –º–µ–Ω—é', 'back_to_menu')]
    ];
    
    const menu = Markup.inlineKeyboard(buttons);
    await ctx.editMessageText(
      `‚è∞ –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –Ω–∞–≥–∞–¥—É–≤–∞–Ω—å:\n\n${status}\nüïê –ß–∞—Å –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è: ${settings.reminder_time}\n\nüí° –ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –≤—ñ–¥–ø—Ä–∞–≤–ª—è—é—Ç—å—Å—è —â–æ–¥–Ω—è –æ –≤–∫–∞–∑–∞–Ω–∏–π —á–∞—Å, —è–∫—â–æ —É –≤–∞—Å —î –ø–ª–∞–Ω–∏ –Ω–∞ –∑–∞–≤—Ç—Ä–∞.`,
      menu
    );
  } catch (error) {
    console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–º–∏–∫–∞–Ω–Ω—ñ –Ω–∞–≥–∞–¥—É–≤–∞–Ω—å:', error);
  }
});

// –ó–º—ñ–Ω–∞ —á–∞—Å—É –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è
bot.action('change_reminder_time', async (ctx) => {
  try {
    await dbManager.updateUserActivity(ctx.from.id);
    
    // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Å—Ç–∞–Ω –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    userStates.set(ctx.from.id, { 
      waitingForReminderTime: true,
      step: 'entering_reminder_time'
    });
    
    const buttons = [
      [Markup.button.callback('üîô –ù–∞–∑–∞–¥ –¥–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å', 'reminder_settings')]
    ];
    
    const menu = Markup.inlineKeyboard(buttons);
    await ctx.editMessageText(
      'üïê –í–≤–µ–¥—ñ—Ç—å —á–∞—Å –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è —É —Ñ–æ—Ä–º–∞—Ç—ñ HH:MM (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, 07:00):\n\nüí° –ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –±—É–¥–µ –≤—ñ–¥–ø—Ä–∞–≤–ª—è—Ç–∏—Å—è —â–æ–¥–Ω—è –æ –≤–∫–∞–∑–∞–Ω–∏–π —á–∞—Å.',
      menu
    );
  } catch (error) {
    console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–º—ñ–Ω—ñ —á–∞—Å—É –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è:', error);
  }
});

// –û–±—Ä–æ–±–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ü–ª–∞–Ω –Ω–∞ –∑–∞–≤—Ç—Ä–∞"
bot.action('tomorrow_plan', async (ctx) => {
  try {
    await dbManager.updateUserActivity(ctx.from.id);
    
    const buttons = [
      [Markup.button.callback('‚ûï –î–æ–¥–∞—Ç–∏ –ø–ª–∞–Ω', 'add_plan')],
      [Markup.button.callback('üëÅÔ∏è –ü–æ–¥–∏–≤–∏—Ç–∏—Å—è –ø–ª–∞–Ω', 'view_plan')],
      [Markup.button.callback('üìã –Ü—Å—Ç–æ—Ä—ñ—è –ø–ª–∞–Ω—ñ–≤', 'plan_history')],
      [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'back_to_menu')]
    ];
    
    const menu = Markup.inlineKeyboard(buttons);
    const planMessage = await ctx.editMessageText(
      'üìù –ü–ª–∞–Ω –Ω–∞ –∑–∞–≤—Ç—Ä–∞:\n\nüí° –û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:\n\n‚ûï –î–æ–¥–∞—Ç–∏ –ø–ª–∞–Ω - —Å—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤–∏–π –ø–ª–∞–Ω\nüëÅÔ∏è –ü–æ–¥–∏–≤–∏—Ç–∏—Å—è –ø–ª–∞–Ω - –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –ø–æ—Ç–æ—á–Ω–∏–π –ø–ª–∞–Ω\nüìã –Ü—Å—Ç–æ—Ä—ñ—è –ø–ª–∞–Ω—ñ–≤ - –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –≤—Å—ñ –ø–ª–∞–Ω–∏',
      menu
    );
    
    // –í—ñ–¥—Å—Ç–µ–∂—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    trackMessage(ctx.from.id, planMessage.message_id);
    
    console.log(`üìù –ü–æ–∫–∞–∑–∞–Ω–æ –º–µ–Ω—é –ø–ª–∞–Ω—ñ–≤ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ ${ctx.from.id}`);
    
  } catch (error) {
    console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑—ñ –º–µ–Ω—é –ø–ª–∞–Ω—ñ–≤:', error);
  }
});

// –î–æ–¥–∞–≤–∞–Ω–Ω—è –ø–ª–∞–Ω—É
bot.action('add_plan', async (ctx) => {
  try {
    await dbManager.updateUserActivity(ctx.from.id);
    
    // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Å—Ç–∞–Ω –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    userStates.set(ctx.from.id, { 
      waitingForPlan: true,
      step: 'entering_plan'
    });
    
    const buttons = [
      [Markup.button.callback('üîô –ù–∞–∑–∞–¥ –¥–æ –º–µ–Ω—é', 'cancel_plan')]
    ];
    
    const menu = Markup.inlineKeyboard(buttons);
    const addPlanMessage = await ctx.editMessageText(
      'üìù –í–≤–µ–¥—ñ—Ç—å –≤–∞—à –ø–ª–∞–Ω –Ω–∞ –∑–∞–≤—Ç—Ä–∞:\n\nüí° –ù–∞–ø—Ä–∏–∫–ª–∞–¥: "–ó—Ä–æ–±–∏—Ç–∏ –∑–∞—Ä—è–¥–∫—É, –ø—Ä–æ—á–∏—Ç–∞—Ç–∏ –∫–Ω–∏–≥—É, –ø–æ–¥–∑–≤–æ–Ω–∏—Ç–∏ –º–∞–º—ñ"\n\nüí° –í–∏ –º–æ–∂–µ—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç–∏ –∫—ñ–ª—å–∫–∞ –ø—É–Ω–∫—Ç—ñ–≤, —Ä–æ–∑–¥—ñ–ª–∏–≤—à–∏ —ó—Ö –∫–æ–º–∞–º–∏ –∞–±–æ –Ω–æ–≤–∏–º–∏ —Ä—è–¥–∫–∞–º–∏.\n\n‚è∞ –ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –±—É–¥–µ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –∑–∞–≤—Ç—Ä–∞ –æ 7 —Ä–∞–Ω–∫—É!',
      menu
    );
    
    // –û—á–∏—â–∞—î–º–æ —Å—Ç–∞—Ä—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —á–µ—Ä–µ–∑ 15 —Å–µ–∫—É–Ω–¥
    setTimeout(async () => {
      await clearBotMessages(ctx, addPlanMessage.message_id);
    }, 15000);
    
  } catch (error) {
    console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—ñ –ø–ª–∞–Ω—É:', error);
  }
});

// –°–∫–∞—Å—É–≤–∞–Ω–Ω—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–ª–∞–Ω—É
bot.action('cancel_plan', async (ctx) => {
  try {
    await dbManager.updateUserActivity(ctx.from.id);
    
    // –û—á–∏—â–∞—î–º–æ —Å—Ç–∞–Ω
    userStates.delete(ctx.from.id);
    
    const buttons = [
      [Markup.button.callback('‚ûï –î–æ–¥–∞—Ç–∏ –ø–ª–∞–Ω', 'add_plan')],
      [Markup.button.callback('üëÅÔ∏è –ü–æ–¥–∏–≤–∏—Ç–∏—Å—è –ø–ª–∞–Ω', 'view_plan')],
      [Markup.button.callback('üìã –Ü—Å—Ç–æ—Ä—ñ—è –ø–ª–∞–Ω—ñ–≤', 'plan_history')],
      [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'back_to_menu')]
    ];
    
    const menu = Markup.inlineKeyboard(buttons);
    const cancelMessage = await ctx.editMessageText(
      'üìù –ü–ª–∞–Ω –Ω–∞ –∑–∞–≤—Ç—Ä–∞:\n\nüí° –û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:\n\n‚ûï –î–æ–¥–∞—Ç–∏ –ø–ª–∞–Ω - —Å—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤–∏–π –ø–ª–∞–Ω\nüëÅÔ∏è –ü–æ–¥–∏–≤–∏—Ç–∏—Å—è –ø–ª–∞–Ω - –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –ø–æ—Ç–æ—á–Ω–∏–π –ø–ª–∞–Ω\nüìã –Ü—Å—Ç–æ—Ä—ñ—è –ø–ª–∞–Ω—ñ–≤ - –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –≤—Å—ñ –ø–ª–∞–Ω–∏',
      menu
    );
    
    // –í—ñ–¥—Å—Ç–µ–∂—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    trackMessage(ctx.from.id, cancelMessage.message_id);
    
    console.log(`üìù –°–∫–∞—Å–æ–≤–∞–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–ª–∞–Ω—É –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ ${ctx.from.id}`);
    
  } catch (error) {
    console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å–∫–∞—Å—É–≤–∞–Ω–Ω—ñ –ø–ª–∞–Ω—É:', error);
  }
});

// –ü–µ—Ä–µ–≥–ª—è–¥ –ø–ª–∞–Ω—É
bot.action('view_plan', async (ctx) => {
  try {
    await dbManager.updateUserActivity(ctx.from.id);
    
    const plan = await dbManager.getPlan(ctx.from.id);
    
    if (plan) {
      const status = plan.completed ? '‚úÖ –í–∏–∫–æ–Ω–∞–Ω–æ' : '‚è≥ –í –æ—á—ñ–∫—É–≤–∞–Ω–Ω—ñ';
      const priority = plan.priority > 1 ? 'üî• –í–∞–∂–ª–∏–≤–æ' : '';
      const category = plan.category !== 'general' ? `üìÇ ${plan.category}` : '';
      
      const buttons = [
        [Markup.button.callback('‚úÖ –ü–æ–∑–Ω–∞—á–∏—Ç–∏ –≤–∏–∫–æ–Ω–∞–Ω–∏–º', `complete_plan_${plan.id}`)],
        [Markup.button.callback('üóëÔ∏è –í–∏–¥–∞–ª–∏—Ç–∏ –ø–ª–∞–Ω', `delete_plan_${plan.id}`)],
        [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'tomorrow_plan')]
      ];
      
      const menu = Markup.inlineKeyboard(buttons);
      
      const viewPlanMessage = await ctx.editMessageText(
        `üìÖ –ü–ª–∞–Ω –Ω–∞ ${formatDate(plan.plan_date)}:\n\nüìù ${plan.plan_text}\n\n${status} ${priority} ${category}\n\nüìÖ –°—Ç–≤–æ—Ä–µ–Ω–æ: ${formatDate(plan.created_at)}`,
        menu
      );
      
      // –û—á–∏—â–∞—î–º–æ —Å—Ç–∞—Ä—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥
      setTimeout(async () => {
        await clearBotMessages(ctx, viewPlanMessage.message_id);
      }, 10000);
      
    } else {
      const noPlanMessage = await ctx.editMessageText(
        'üìù –ü–ª–∞–Ω –Ω–∞ –∑–∞–≤—Ç—Ä–∞ —â–µ –Ω–µ —Å—Ç–≤–æ—Ä–µ–Ω–æ!\n\nüí° –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å "–î–æ–¥–∞—Ç–∏ –ø–ª–∞–Ω" —â–æ–± —Å—Ç–≤–æ—Ä–∏—Ç–∏ —Å–≤—ñ–π –ø–ª–∞–Ω.',
        Markup.inlineKeyboard([[Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'tomorrow_plan')]])
      );
      
      // –û—á–∏—â–∞—î–º–æ —Å—Ç–∞—Ä—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —á–µ—Ä–µ–∑ 8 —Å–µ–∫—É–Ω–¥
      setTimeout(async () => {
        await clearBotMessages(ctx, noPlanMessage.message_id);
      }, 8000);
    }
  } catch (error) {
    console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≥–ª—è–¥—ñ –ø–ª–∞–Ω—É:', error);
    await ctx.editMessageText('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –ø–ª–∞–Ω—É. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.');
  }
});

// –ü–æ–∑–Ω–∞—á–µ–Ω–Ω—è –ø–ª–∞–Ω—É —è–∫ –≤–∏–∫–æ–Ω–∞–Ω–æ–≥–æ
bot.action(/complete_plan_(\d+)/, async (ctx) => {
  try {
    await dbManager.updateUserActivity(ctx.from.id);
    
    const planId = parseInt(ctx.match[1]);
    const success = await dbManager.markPlanCompleted(planId, ctx.from.id);
    
    if (success) {
      await ctx.editMessageText(
        '‚úÖ –ü–ª–∞–Ω –ø–æ–∑–Ω–∞—á–µ–Ω–æ —è–∫ –≤–∏–∫–æ–Ω–∞–Ω–∏–π!\n\nüéâ –í—ñ—Ç–∞—î–º–æ –∑ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è–º –ø–ª–∞–Ω—É!',
        Markup.inlineKeyboard([[Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'tomorrow_plan')]])
      );
    } else {
      await ctx.editMessageText(
        '‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –ø–æ–∑–Ω–∞—á–∏—Ç–∏ –ø–ª–∞–Ω —è–∫ –≤–∏–∫–æ–Ω–∞–Ω–∏–π.',
        Markup.inlineKeyboard([[Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'tomorrow_plan')]])
      );
    }
  } catch (error) {
    console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–æ–∑–Ω–∞—á–µ–Ω–Ω—ñ –ø–ª–∞–Ω—É:', error);
    await ctx.editMessageText('‚ùå –ü–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.');
  }
});

// –í–∏–¥–∞–ª–µ–Ω–Ω—è –ø–ª–∞–Ω—É
bot.action(/delete_plan_(\d+)/, async (ctx) => {
  try {
    await dbManager.updateUserActivity(ctx.from.id);
    
    const planId = parseInt(ctx.match[1]);
    const success = await dbManager.deletePlan(planId, ctx.from.id);
    
    if (success) {
      await ctx.editMessageText(
        'üóëÔ∏è –ü–ª–∞–Ω –≤–∏–¥–∞–ª–µ–Ω–æ!\n\nüí° –ú–æ–∂–µ—Ç–µ —Å—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤–∏–π –ø–ª–∞–Ω.',
        Markup.inlineKeyboard([[Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'tomorrow_plan')]])
      );
    } else {
      await ctx.editMessageText(
        '‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ –ø–ª–∞–Ω.',
        Markup.inlineKeyboard([[Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'tomorrow_plan')]])
      );
    }
  } catch (error) {
    console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—ñ –ø–ª–∞–Ω—É:', error);
    await ctx.editMessageText('‚ùå –ü–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.');
  }
});

// –Ü—Å—Ç–æ—Ä—ñ—è –ø–ª–∞–Ω—ñ–≤
bot.action('plan_history', async (ctx) => {
  try {
    await dbManager.updateUserActivity(ctx.from.id);
    
    const plans = await dbManager.getPlans(ctx.from.id, 5);
    
    if (plans.length > 0) {
      let message = 'üìã –í–∞—à—ñ –æ—Å—Ç–∞–Ω–Ω—ñ –ø–ª–∞–Ω–∏:\n\n';
      
      plans.forEach((plan, index) => {
        const status = plan.completed ? '‚úÖ' : '‚è≥';
        const priority = plan.priority > 1 ? 'üî•' : '';
        const date = formatDate(plan.plan_date);
        message += `${status} ${priority} ${date}: ${plan.plan_text}\n\n`;
      });
      
      await ctx.editMessageText(
        message,
        Markup.inlineKeyboard([[Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'tomorrow_plan')]])
      );
    } else {
      await ctx.editMessageText(
        'üìù –£ –≤–∞—Å –ø–æ–∫–∏ –Ω–µ–º–∞—î –ø–ª–∞–Ω—ñ–≤!\n\nüí° –°—Ç–≤–æ—Ä—ñ—Ç—å —Å–≤—ñ–π –ø–µ—Ä—à–∏–π –ø–ª–∞–Ω.',
        Markup.inlineKeyboard([[Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'tomorrow_plan')]])
      );
    }
  } catch (error) {
    console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —ñ—Å—Ç–æ—Ä—ñ—ó:', error);
    await ctx.editMessageText('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —ñ—Å—Ç–æ—Ä—ñ—ó. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.');
  }
});

// –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
bot.action('statistics', async (ctx) => {
  try {
    await dbManager.updateUserActivity(ctx.from.id);
    
    const stats = await dbManager.getStatistics(ctx.from.id, 7);
    
    if (stats.length > 0) {
      let message = 'üìä –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –æ—Å—Ç–∞–Ω–Ω—ñ 7 –¥–Ω—ñ–≤:\n\n';
      
      stats.forEach((stat, index) => {
        const date = formatDate(stat.date);
        message += `üìÖ ${date}:\n`;
        message += `   ‚ûï –°—Ç–≤–æ—Ä–µ–Ω–æ: ${stat.plans_created || 0}\n`;
        message += `   ‚úÖ –í–∏–∫–æ–Ω–∞–Ω–æ: ${stat.plans_completed || 0}\n\n`;
      });
      
      await ctx.editMessageText(
        message,
        Markup.inlineKeyboard([[Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'back_to_menu')]])
      );
    } else {
      await ctx.editMessageText(
        'üìä –ü–æ–∫–∏ –Ω–µ–º–∞—î —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏!\n\nüí° –°—Ç–≤–æ—Ä—ñ—Ç—å –ø–ª–∞–Ω–∏ —â–æ–± –ø–æ–±–∞—á–∏—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É.',
        Markup.inlineKeyboard([[Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'back_to_menu')]])
      );
    }
  } catch (error) {
    console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
    await ctx.editMessageText('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.');
  }
});

// –ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é
bot.action('back_to_menu', async (ctx) => {
  try {
    await dbManager.updateUserActivity(ctx.from.id);
    
    const menu = await createMainMenu(ctx.from.id);
    const menuMessage = await ctx.editMessageText(
      'üëã –í—ñ—Ç–∞—é! –Ø —Å—É—á–∞—Å–Ω–∏–π Telegram-–±–æ—Ç –∑ –ø–æ–∫—Ä–∞—â–µ–Ω–æ—é —Å–∏—Å—Ç–µ–º–æ—é –ø–ª–∞–Ω—É–≤–∞–Ω–Ω—è, –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è–º–∏ —Ç–∞ –∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä–æ–º –≤–∞–ª—é—Ç!\n\nüí° –ú–µ–Ω—é –∑–∞–ª–∏—à–∞—î—Ç—å—Å—è –¥–æ—Å—Ç—É–ø–Ω–∏–º –¥–ª—è –∑—Ä—É—á–Ω–æ—Å—Ç—ñ –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó.',
      menu
    );
    
    // –í—ñ–¥—Å—Ç–µ–∂—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    trackMessage(ctx.from.id, menuMessage.message_id);
    
    console.log(`üîô –ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ –º–µ–Ω—é –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ ${ctx.from.id}`);
    
  } catch (error) {
    console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—ñ –¥–æ –º–µ–Ω—é:', error);
  }
});

// –û–ø—Ç–∏–º—ñ–∑–æ–≤–∞–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–Ω–æ–ø–æ–∫ –≤–∞–ª—é—Ç
function createCurrencyButtons(step, selectedCurrency = null) {
  const currencies = currencyConverter.getCurrencies();
  const buttons = [];
  
  // –°—Ç–≤–æ—Ä—é—î–º–æ –∫–Ω–æ–ø–∫–∏ –≤–∞–ª—é—Ç (–ø–æ 3 –≤ —Ä—è–¥)
  const currencyEntries = Object.entries(currencies);
  for (let i = 0; i < currencyEntries.length; i += 3) {
    const row = [];
    for (let j = 0; j < 3 && i + j < currencyEntries.length; j++) {
      const [code, info] = currencyEntries[i + j];
      const isSelected = selectedCurrency === code;
      const label = `${isSelected ? '‚úÖ' : ''} ${info.flag} ${code}`;
      
      // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π –ø—Ä–µ—Ñ—ñ–∫—Å –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ –∫—Ä–æ–∫—É
      let callbackData;
      switch (step) {
        case 'from':
          callbackData = `from_currency_${code}`;
          break;
        case 'to':
          callbackData = `to_currency_${code}`;
          break;
        case 'base_currency':
          callbackData = `base_currency_${code}`;
          break;
        default:
          callbackData = `${step}_${code}`;
      }
      
      row.push(Markup.button.callback(label, callbackData));
    }
    buttons.push(row);
  }
  
  return buttons;
}

// –û–±—Ä–æ–±–∫–∞ –≤–∏–±–æ—Ä—É –≤–∞–ª—é—Ç–∏ "–∑"
bot.action(/from_currency_(.+)/, async (ctx) => {
  try {
    await dbManager.updateUserActivity(ctx.from.id);
    
    const selectedCurrency = ctx.match[1];
    const userState = userStates.get(ctx.from.id);
    
    if (userState && userState.convertingCurrency && userState.step === 'selecting_from_currency') {
      userState.fromCurrency = selectedCurrency;
      userState.step = 'selecting_to_currency';
      
      const buttons = createCurrencyButtons('to', userState.toCurrency);
      buttons.push([Markup.button.callback('üîô –ù–∞–∑–∞–¥ –¥–æ –≤–∏–±–æ—Ä—É –≤–∞–ª—é—Ç–∏ "–∑"', 'convert_currency')]);
      
      const menu = Markup.inlineKeyboard(buttons);
      const currencyInfo = currencyConverter.getCurrencies()[selectedCurrency];
      
      await safeEditMessage(ctx,
        `üí± –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—è –≤–∞–ª—é—Ç:\n\nüí∞ –°—É–º–∞: ${userState.amount}\nüì§ –ó: ${currencyInfo.flag} ${selectedCurrency}\nüì• –í: –û–±–µ—Ä—ñ—Ç—å –≤–∞–ª—é—Ç—É\n\nüí° –û–±–µ—Ä—ñ—Ç—å –≤–∞–ª—é—Ç—É, –≤ —è–∫—É —Ö–æ—á–µ—Ç–µ –∫–æ–Ω–≤–µ—Ä—Ç—É–≤–∞—Ç–∏:`,
        menu
      );
      
      console.log(`üì§ –í–∞–ª—é—Ç—É "–∑" –æ–±—Ä–∞–Ω–æ: ${selectedCurrency} –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ ${ctx.from.id}`);
      
    } else {
      console.log(`‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Å—Ç–∞–Ω –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ ${ctx.from.id} –¥–ª—è –≤–∏–±–æ—Ä—É –≤–∞–ª—é—Ç–∏ "–∑"`);
      await safeEditMessage(ctx,
        '‚ùå –ü–æ–º–∏–ª–∫–∞: –Ω–µ–æ–±—Ö—ñ–¥–Ω–æ —Å–ø–æ—á–∞—Ç–∫—É –≤–≤–µ—Å—Ç–∏ —Å—É–º—É –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—ó.',
        Markup.inlineKeyboard([[Markup.button.callback('üîô –ù–∞–∑–∞–¥ –¥–æ –∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä–∞', 'currency_converter')]])
      );
    }
  } catch (error) {
    console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–±–æ—Ä—ñ –≤–∞–ª—é—Ç–∏ "–∑":', error);
  }
});

// –û–±—Ä–æ–±–∫–∞ –≤–∏–±–æ—Ä—É –≤–∞–ª—é—Ç–∏ "–≤"
bot.action(/to_currency_(.+)/, async (ctx) => {
  try {
    await dbManager.updateUserActivity(ctx.from.id);
    
    const selectedCurrency = ctx.match[1];
    const userState = userStates.get(ctx.from.id);
    
    if (userState && userState.convertingCurrency && userState.fromCurrency) {
      userState.toCurrency = selectedCurrency;
      
      // –í–∏–∫–æ–Ω—É—î–º–æ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—é
      try {
        const conversion = currencyConverter.convert(
          parseFloat(userState.amount),
          userState.fromCurrency,
          selectedCurrency
        );
        
        const formatted = currencyConverter.formatResult(conversion);
        
        const buttons = [
          [Markup.button.callback('üí± –ù–æ–≤–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—è', 'convert_currency')],
          [Markup.button.callback('üìä –ö—É—Ä—Å–∏ –≤–∞–ª—é—Ç', 'exchange_rates')],
          [Markup.button.callback('üîô –ù–∞–∑–∞–¥ –¥–æ –∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä–∞', 'currency_converter')]
        ];
        
        const menu = Markup.inlineKeyboard(buttons);
        
        await safeEditMessage(ctx,
          `üí± –†–µ–∑—É–ª—å—Ç–∞—Ç –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—ó:\n\n${formatted.from}\n‚¨áÔ∏è\n${formatted.to}\n\nüìä –ö—É—Ä—Å: ${formatted.rate}\nüìä –ó–≤–æ—Ä–æ—Ç–Ω–∏–π –∫—É—Ä—Å: ${formatted.reverseRate}\nüìÖ –î–∞—Ç–∞: ${formatted.date}`,
          menu
        );
        
        // –û—á–∏—â–∞—î–º–æ —Å—Ç–∞–Ω
        userStates.delete(ctx.from.id);
        
        console.log(`üí± –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—è –≤–∏–∫–æ–Ω–∞–Ω–∞: ${userState.amount} ${userState.fromCurrency} = ${conversion.result.toFixed(2)} ${selectedCurrency} –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ ${ctx.from.id}`);
        
      } catch (error) {
        console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—ó:', error);
        await safeEditMessage(ctx,
          '‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—ó. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ —á–∏ –≤—Å—ñ –≤–∞–ª—é—Ç–∏ –ø—ñ–¥—Ç—Ä–∏–º—É—é—Ç—å—Å—è.',
          Markup.inlineKeyboard([[Markup.button.callback('üîô –ù–∞–∑–∞–¥ –¥–æ –∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä–∞', 'currency_converter')]])
        );
      }
    } else {
      console.log(`‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Å—Ç–∞–Ω –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ ${ctx.from.id} –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—ó`);
      await safeEditMessage(ctx,
        '‚ùå –ü–æ–º–∏–ª–∫–∞: –Ω–µ–æ–±—Ö—ñ–¥–Ω–æ —Å–ø–æ—á–∞—Ç–∫—É –≤–≤–µ—Å—Ç–∏ —Å—É–º—É —Ç–∞ –≤–∏–±—Ä–∞—Ç–∏ –≤–∞–ª—é—Ç—É "–∑".',
        Markup.inlineKeyboard([[Markup.button.callback('üîô –ù–∞–∑–∞–¥ –¥–æ –∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä–∞', 'currency_converter')]])
      );
    }
  } catch (error) {
    console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–±–æ—Ä—ñ –≤–∞–ª—é—Ç–∏ "–≤":', error);
  }
});

// –û–±—Ä–æ–±–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
bot.on('text', async (ctx) => {
  const userState = userStates.get(ctx.from.id);
  
  if (userState && userState.waitingForPlan) {
    try {
      const planText = ctx.message.text.trim();
      
      // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –ø–ª–∞–Ω –Ω–µ –ø–æ—Ä–æ–∂–Ω—ñ–π
      if (planText.length === 0) {
        await ctx.reply('‚ùå –ü–ª–∞–Ω –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –ø–æ—Ä–æ–∂–Ω—ñ–º. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.');
        return;
      }
      
      // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –¥–æ–≤–∂–∏–Ω—É –ø–ª–∞–Ω—É
      if (planText.length > 1000) {
        await ctx.reply('‚ùå –ü–ª–∞–Ω –∑–∞–Ω–∞–¥—Ç–æ –¥–æ–≤–≥–∏–π. –ú–∞–∫—Å–∏–º—É–º 1000 —Å–∏–º–≤–æ–ª—ñ–≤.');
        return;
      }
      
      const result = await dbManager.savePlan(ctx.from.id, planText);
      
      // –û—á–∏—â–∞—î–º–æ —Å—Ç–∞–Ω
      userStates.delete(ctx.from.id);
      
      const actionText = result.updated ? '–æ–Ω–æ–≤–ª–µ–Ω–æ' : '–∑–±–µ—Ä–µ–∂–µ–Ω–æ';
      
      await ctx.reply(
        `‚úÖ –ü–ª–∞–Ω –Ω–∞ –∑–∞–≤—Ç—Ä–∞ ${actionText}!\n\nüìù –í–∞—à –ø–ª–∞–Ω:\n${planText}\n\n‚è∞ –ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –±—É–¥–µ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –∑–∞–≤—Ç—Ä–∞ –æ 7 —Ä–∞–Ω–∫—É!`,
        Markup.inlineKeyboard([
          [Markup.button.callback('üëÅÔ∏è –ü–æ–¥–∏–≤–∏—Ç–∏—Å—è –ø–ª–∞–Ω', 'view_plan')],
          [Markup.button.callback('üîô –ù–∞–∑–∞–¥ –¥–æ –º–µ–Ω—é', 'tomorrow_plan')]
        ])
      );
    } catch (error) {
      console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—ñ –ø–ª–∞–Ω—É:', error);
      await ctx.reply('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—ñ –ø–ª–∞–Ω—É. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.');
    }
  } else if (userState && userState.waitingForReminderTime) {
    try {
      const timeText = ctx.message.text.trim();
      
      // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ñ–æ—Ä–º–∞—Ç —á–∞—Å—É (HH:MM)
      const timeRegex = /^([0-1]?[0-9]|2[0-3]):[0-5][0-9]$/;
      if (!timeRegex.test(timeText)) {
        await ctx.reply('‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç —á–∞—Å—É! –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç HH:MM (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, 07:00)');
        return;
      }
      
      const settings = await dbManager.getUserReminderSettings(ctx.from.id);
      await dbManager.updateUserReminderSettings(ctx.from.id, timeText, settings.reminder_enabled);
      
      // –û—á–∏—â–∞—î–º–æ —Å—Ç–∞–Ω
      userStates.delete(ctx.from.id);
      
      await ctx.reply(
        `‚úÖ –ß–∞—Å –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –∑–º—ñ–Ω–µ–Ω–æ –Ω–∞ ${timeText}!\n\nüí° –ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –±—É–¥–µ –≤—ñ–¥–ø—Ä–∞–≤–ª—è—Ç–∏—Å—è —â–æ–¥–Ω—è –æ ${timeText}, —è–∫—â–æ —É –≤–∞—Å —î –ø–ª–∞–Ω–∏ –Ω–∞ –∑–∞–≤—Ç—Ä–∞.`,
        Markup.inlineKeyboard([[Markup.button.callback('üîô –ù–∞–∑–∞–¥ –¥–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å', 'reminder_settings')]])
      );
    } catch (error) {
      console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–º—ñ–Ω—ñ —á–∞—Å—É –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è:', error);
      await ctx.reply('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–º—ñ–Ω—ñ —á–∞—Å—É –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.');
    }
  } else if (userState && userState.creatingReminder && userState.step === 'entering_message') {
    try {
      const messageText = ctx.message.text.trim();
      
      // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–µ –ø–æ—Ä–æ–∂–Ω—î
      if (messageText.length === 0) {
        await ctx.reply('‚ùå –¢–µ–∫—Å—Ç –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –ø–æ—Ä–æ–∂–Ω—ñ–º. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.');
        return;
      }
      
      // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –¥–æ–≤–∂–∏–Ω—É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
      if (messageText.length > 500) {
        await ctx.reply('‚ùå –¢–µ–∫—Å—Ç –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –∑–∞–Ω–∞–¥—Ç–æ –¥–æ–≤–≥–∏–π. –ú–∞–∫—Å–∏–º—É–º 500 —Å–∏–º–≤–æ–ª—ñ–≤.');
        return;
      }
      
      // –°—Ç–≤–æ—Ä—é—î–º–æ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è
      const reminderId = await dbManager.createCustomReminder(
        ctx.from.id,
        null, // plan_id –º–æ–∂–µ –±—É—Ç–∏ null –¥–ª—è –æ–∫—Ä–µ–º–∏—Ö –Ω–∞–≥–∞–¥—É–≤–∞–Ω—å
        userState.selectedDate,
        userState.selectedTime,
        messageText
      );
      
      // –û—á–∏—â–∞—î–º–æ —Å—Ç–∞–Ω
      userStates.delete(ctx.from.id);
      
      const selectedDate = formatDate(userState.selectedDate);
      
      await ctx.reply(
        `‚úÖ –ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è —Å—Ç–≤–æ—Ä–µ–Ω–æ!\n\nüìÖ –î–∞—Ç–∞: ${selectedDate}\nüïê –ß–∞—Å: ${userState.selectedTime}\nüìù –¢–µ–∫—Å—Ç: ${messageText}\n\n‚è∞ –ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –±—É–¥–µ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –≤–∫–∞–∑–∞–Ω–æ–≥–æ –¥–Ω—è –æ –≤–∫–∞–∑–∞–Ω–∏–π —á–∞—Å.`,
        Markup.inlineKeyboard([
          [Markup.button.callback('üìã –ú–æ—ó –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è', 'my_reminders')],
          [Markup.button.callback('üîô –ù–∞–∑–∞–¥ –¥–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å', 'reminder_settings')]
        ])
      );
    } catch (error) {
      console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è:', error);
      await ctx.reply('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.');
    }
  } else if (userState && userState.convertingCurrency && userState.step === 'entering_amount') {
    try {
      const amountText = ctx.message.text.trim();
      
      // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —Å—É–º–∞ —î —á–∏—Å–ª–æ–º
      const amount = parseFloat(amountText.replace(',', '.'));
      if (isNaN(amount) || amount <= 0) {
        await ctx.reply('‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞ —Å—É–º–∞! –í–≤–µ–¥—ñ—Ç—å –¥–æ–¥–∞—Ç–Ω–µ —á–∏—Å–ª–æ.');
        return;
      }
      
      // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É —Å—É–º—É
      if (amount > 1000000) {
        await ctx.reply('‚ùå –°—É–º–∞ –∑–∞–Ω–∞–¥—Ç–æ –≤–µ–ª–∏–∫–∞! –ú–∞–∫—Å–∏–º—É–º 1,000,000.');
        return;
      }
      
      userState.amount = amount;
      userState.step = 'selecting_from_currency';
      
      const buttons = createCurrencyButtons('from', null);
      buttons.push([Markup.button.callback('üîô –ù–∞–∑–∞–¥ –¥–æ –∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä–∞', 'currency_converter')]);
      
      const menu = Markup.inlineKeyboard(buttons);
      const currencyMessage = await ctx.reply(
        `üí∞ –í–≤–µ–¥–µ–Ω–∞ —Å—É–º–∞: ${amount}\n\nüí± –û–±–µ—Ä—ñ—Ç—å –≤–∞–ª—é—Ç—É, –∑ —è–∫–æ—ó –∫–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ:`,
        menu
      );
      
      // –í—ñ–¥—Å—Ç–µ–∂—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
      trackMessage(ctx.from.id, currencyMessage.message_id);
      
      console.log(`üí∞ –°—É–º–∞ ${amount} –≤–≤–µ–¥–µ–Ω–∞ –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—ó –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º ${ctx.from.id}`);
      
    } catch (error) {
      console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ —Å—É–º–∏:', error);
      await ctx.reply('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ —Å—É–º–∏. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.');
    }
    return;
  } else if (userState && userState.enteringAmountForRates) {
    try {
      const amountText = ctx.message.text.trim();
      
      // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —Å—É–º–∞ —î —á–∏—Å–ª–æ–º
      const amount = parseFloat(amountText);
      if (isNaN(amount) || amount <= 0) {
        await ctx.reply('‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞ —Å—É–º–∞! –í–≤–µ–¥—ñ—Ç—å –¥–æ–¥–∞—Ç–Ω–µ —á–∏—Å–ª–æ.');
        return;
      }
      
      // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É —Å—É–º—É
      if (amount > 1000000) {
        await ctx.reply('‚ùå –°—É–º–∞ –∑–∞–Ω–∞–¥—Ç–æ –≤–µ–ª–∏–∫–∞! –ú–∞–∫—Å–∏–º—É–º 1,000,000.');
        return;
      }
      
      // –û—á–∏—â–∞—î–º–æ —Å—Ç–∞–Ω
      userStates.delete(ctx.from.id);
      
      // –ü–æ–∫–∞–∑—É—î–º–æ –∫—É—Ä—Å–∏ –¥–ª—è –≤–≤–µ–¥–µ–Ω–æ—ó —Å—É–º–∏ (–∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º USD)
      const message = currencyConverter.formatExchangeRatesForAmount(amount);
      
      const buttons = [
        [Markup.button.callback('üí∞ –í–≤–µ—Å—Ç–∏ —ñ–Ω—à—É —Å—É–º—É', 'enter_amount_for_rates')],
        [Markup.button.callback('üè¶ –ó–º—ñ–Ω–∏—Ç–∏ –±–∞–∑–æ–≤—É –≤–∞–ª—é—Ç—É', 'select_base_currency')],
        [Markup.button.callback('üîÑ –û–Ω–æ–≤–∏—Ç–∏ –∫—É—Ä—Å–∏', 'refresh_rates')],
        [Markup.button.callback('üîô –ù–∞–∑–∞–¥ –¥–æ –∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä–∞', 'currency_converter')]
      ];
      
      const menu = Markup.inlineKeyboard(buttons);
      const ratesMessage = await ctx.reply(message, menu);
      
      // –í—ñ–¥—Å—Ç–µ–∂—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
      trackMessage(ctx.from.id, ratesMessage.message_id);
      
      console.log(`üìä –ü–æ–∫–∞–∑–∞–Ω–æ –∫—É—Ä—Å–∏ –¥–ª—è —Å—É–º–∏ ${amount} –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É ${ctx.from.id}`);
      
    } catch (error) {
      console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ —Å—É–º–∏ –¥–ª—è –∫—É—Ä—Å—ñ–≤:', error);
      await ctx.reply('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ —Å—É–º–∏. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.');
    }
    return;
  }
});

// –°—Ç–≤–æ—Ä—é—î–º–æ –µ–∫–∑–µ–º–ø–ª—è—Ä —Å–∏—Å—Ç–µ–º–∏ –Ω–∞–≥–∞–¥—É–≤–∞–Ω—å
const reminderSystem = new ReminderSystem(bot, dbManager);

// –û–ø—Ç–∏–º—ñ–∑–æ–≤–∞–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –∑–∞–ø—É—Å–∫—É –±–æ—Ç–∞
async function startBot() {
  try {
    console.log('üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...');
    
    // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –±–∞–∑—É –¥–∞–Ω–∏—Ö
    await dbManager.initialize();
    
    // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä –≤–∞–ª—é—Ç
    await currencyConverter.initialize();
    
    // –ó–∞–ø—É—Å–∫–∞—î–º–æ —Å–∏—Å—Ç–µ–º—É –Ω–∞–≥–∞–¥—É–≤–∞–Ω—å
    reminderSystem.start();
    
    // –ó–∞–ø—É—Å–∫–∞—î–º–æ –±–æ—Ç–∞
    await bot.launch();
    
    console.log('ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ!');
    console.log('‚è∞ –°–∏—Å—Ç–µ–º–∞ –Ω–∞–≥–∞–¥—É–≤–∞–Ω—å –∞–∫—Ç–∏–≤–Ω–∞');
    console.log('üí± –ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä –≤–∞–ª—é—Ç –∞–∫—Ç–∏–≤–Ω–∏–π');
    
    // –û–±—Ä–æ–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è —Ä–æ–±–æ—Ç–∏
    process.once('SIGINT', () => {
      console.log('üõë –û—Ç—Ä–∏–º–∞–Ω–æ —Å–∏–≥–Ω–∞–ª SIGINT, –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è —Ä–æ–±–æ—Ç–∏...');
      bot.stop('SIGINT');
      reminderSystem.stop();
      db.close();
    });
    
    process.once('SIGTERM', () => {
      console.log('üõë –û—Ç—Ä–∏–º–∞–Ω–æ —Å–∏–≥–Ω–∞–ª SIGTERM, –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è —Ä–æ–±–æ—Ç–∏...');
      bot.stop('SIGTERM');
      reminderSystem.stop();
      db.close();
    });
    
  } catch (error) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–ø—É—Å–∫—É –±–æ—Ç–∞:', error);
    process.exit(1);
  }
}

startBot(); 

// –û–±—Ä–æ–±–∫–∞ –≤–∏—Ö–æ–¥—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ –±–æ—Ç–∞
bot.on('left_chat_member', async (ctx) => {
  const userId = ctx.message.left_chat_member.id;
  
  // –û—á–∏—â–∞—î–º–æ –≤—Å—ñ –¥–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
  cleanupUserData(userId);
  
  console.log(`üëã –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á ${userId} –≤–∏–π—à–æ–≤ –∑ –±–æ—Ç–∞. –î–∞–Ω—ñ –æ—á–∏—â–µ–Ω–æ.`);
});

// –û–±—Ä–æ–±–∫–∞ –±–ª–æ–∫—É–≤–∞–Ω–Ω—è –±–æ—Ç–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º
bot.on('my_chat_member', async (ctx) => {
  if (ctx.update.my_chat_member.new_chat_member.status === 'kicked') {
    const userId = ctx.from.id;
    
    // –û—á–∏—â–∞—î–º–æ –≤—Å—ñ –¥–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    cleanupUserData(userId);
    
    console.log(`üö´ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á ${userId} –∑–∞–±–ª–æ–∫—É–≤–∞–≤ –±–æ—Ç–∞. –î–∞–Ω—ñ –æ—á–∏—â–µ–Ω–æ.`);
  }
});

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ–≥–æ –æ—á–∏—â–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
function cleanupUserData(userId) {
  messageTracker.delete(userId);
  userActivityTracker.delete(userId);
  userStates.delete(userId);
  userSessionTracker.delete(userId); // –û—á–∏—â–∞—î–º–æ —Å–µ—Å—ñ—é
  console.log(`üßπ –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –æ—á–∏—â–µ–Ω–æ –¥–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ ${userId}`);
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—á–∏—â–µ–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –±–æ—Ç–∞
async function clearBotMessages(ctx, exceptMessageId = null) {
  try {
    // –û—á–∏—â–∞—î–º–æ —Å—Ç–∞—Ä—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, –∫—Ä—ñ–º –ø–æ—Ç–æ—á–Ω–æ–≥–æ
    const keepCount = exceptMessageId ? 1 : 0;
    await clearAllUserMessages(ctx, exceptMessageId);
    console.log(`üßπ –û—á–∏—â–µ–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –±–æ—Ç–∞ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ ${ctx.from.id}`);
  } catch (error) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—á–∏—â–µ–Ω–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –±–æ—Ç–∞:', error);
  }
}

// –ë–µ–∑–ø–µ—á–Ω–µ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
async function safeEditMessage(ctx, text, markup) {
  try {
    await ctx.editMessageText(text, markup);
  } catch (editError) {
    // –Ø–∫—â–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–µ –∑–º—ñ–Ω–∏–ª–æ—Å—è, –ø—Ä–æ—Å—Ç–æ —ñ–≥–Ω–æ—Ä—É—î–º–æ –ø–æ–º–∏–ª–∫—É
    if (editError.description && editError.description.includes('message is not modified')) {
      console.log(`‚ÑπÔ∏è –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–µ –∑–º—ñ–Ω–∏–ª–æ—Å—è –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ ${ctx.from.id}`);
      return;
    }
    throw editError;
  }
}

// –û–ø—Ç–∏–º—ñ–∑–æ–≤–∞–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó –æ–±—Ä–æ–±–∫–∏ –≤–≤–µ–¥–µ–Ω–Ω—è
async function handlePlanInput(ctx) {
  try {
    const planText = ctx.message.text.trim();
    
    if (planText.length === 0) {
      await ctx.reply('‚ùå –ü–ª–∞–Ω –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –ø–æ—Ä–æ–∂–Ω—ñ–º.');
      return;
    }
    
    if (planText.length > 1000) {
      await ctx.reply('‚ùå –ü–ª–∞–Ω –∑–∞–Ω–∞–¥—Ç–æ –¥–æ–≤–≥–∏–π. –ú–∞–∫—Å–∏–º—É–º 1000 —Å–∏–º–≤–æ–ª—ñ–≤.');
      return;
    }
    
    const result = await dbManager.savePlan(ctx.from.id, planText);
    userStates.delete(ctx.from.id);
    
    const actionText = result.updated ? '–æ–Ω–æ–≤–ª–µ–Ω–æ' : '–∑–±–µ—Ä–µ–∂–µ–Ω–æ';
    
    await ctx.reply(
      `‚úÖ –ü–ª–∞–Ω –Ω–∞ –∑–∞–≤—Ç—Ä–∞ ${actionText}!\n\nüìù –í–∞—à –ø–ª–∞–Ω:\n${planText}\n\n‚è∞ –ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –±—É–¥–µ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –∑–∞–≤—Ç—Ä–∞ –æ 7 —Ä–∞–Ω–∫—É!`,
      Markup.inlineKeyboard([
        [Markup.button.callback('üëÅÔ∏è –ü–æ–¥–∏–≤–∏—Ç–∏—Å—è –ø–ª–∞–Ω', 'view_plan')],
        [Markup.button.callback('üîô –ù–∞–∑–∞–¥ –¥–æ –º–µ–Ω—é', 'tomorrow_plan')]
      ])
    );
  } catch (error) {
    console.error('–ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –ø–ª–∞–Ω—É:', error);
    await ctx.reply('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—ñ –ø–ª–∞–Ω—É.');
  }
}

async function handleReminderTimeInput(ctx) {
  try {
    const timeText = ctx.message.text.trim();
    const timeRegex = /^([0-1]?[0-9]|2[0-3]):[0-5][0-9]$/;
    
    if (!timeRegex.test(timeText)) {
      await ctx.reply('‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç —á–∞—Å—É! –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ HH:MM');
      return;
    }
    
    const settings = await dbManager.getUserReminderSettings(ctx.from.id);
    await dbManager.updateUserReminderSettings(ctx.from.id, timeText, settings.reminder_enabled);
    userStates.delete(ctx.from.id);
    
    await ctx.reply(
      `‚úÖ –ß–∞—Å –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –∑–º—ñ–Ω–µ–Ω–æ –Ω–∞ ${timeText}!`,
      Markup.inlineKeyboard([[Markup.button.callback('üîô –ù–∞–∑–∞–¥ –¥–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å', 'reminder_settings')]])
    );
  } catch (error) {
    console.error('–ü–æ–º–∏–ª–∫–∞ –∑–º—ñ–Ω–∏ —á–∞—Å—É:', error);
    await ctx.reply('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–º—ñ–Ω—ñ —á–∞—Å—É –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è.');
  }
}

async function handleReminderMessageInput(ctx) {
  try {
    const messageText = ctx.message.text.trim();
    
    if (messageText.length === 0) {
      await ctx.reply('‚ùå –¢–µ–∫—Å—Ç –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –ø–æ—Ä–æ–∂–Ω—ñ–º.');
      return;
    }
    
    if (messageText.length > 500) {
      await ctx.reply('‚ùå –¢–µ–∫—Å—Ç –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –∑–∞–Ω–∞–¥—Ç–æ –¥–æ–≤–≥–∏–π. –ú–∞–∫—Å–∏–º—É–º 500 —Å–∏–º–≤–æ–ª—ñ–≤.');
      return;
    }
    
    const reminderId = await dbManager.createCustomReminder(
      ctx.from.id,
      null,
      userState.selectedDate,
      userState.selectedTime,
      messageText
    );
    
    userStates.delete(ctx.from.id);
    const selectedDate = formatDate(userState.selectedDate);
    
    await ctx.reply(
      `‚úÖ –ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è —Å—Ç–≤–æ—Ä–µ–Ω–æ!\n\nüìÖ –î–∞—Ç–∞: ${selectedDate}\nüïê –ß–∞—Å: ${userState.selectedTime}\nüìù –¢–µ–∫—Å—Ç: ${messageText}`,
      Markup.inlineKeyboard([
        [Markup.button.callback('üìã –ú–æ—ó –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è', 'my_reminders')],
        [Markup.button.callback('üîô –ù–∞–∑–∞–¥ –¥–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å', 'reminder_settings')]
      ])
    );
  } catch (error) {
    console.error('–ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è:', error);
    await ctx.reply('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è.');
  }
}

async function handleCurrencyAmountInput(ctx) {
  try {
    const amountText = ctx.message.text.trim();
    const amount = parseFloat(amountText.replace(',', '.'));
    
    if (isNaN(amount) || amount <= 0) {
      await ctx.reply('‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞ —Å—É–º–∞! –í–≤–µ–¥—ñ—Ç—å –¥–æ–¥–∞—Ç–Ω–µ —á–∏—Å–ª–æ.');
      return;
    }
    
    if (amount > 1000000) {
      await ctx.reply('‚ùå –°—É–º–∞ –∑–∞–Ω–∞–¥—Ç–æ –≤–µ–ª–∏–∫–∞! –ú–∞–∫—Å–∏–º—É–º 1,000,000.');
      return;
    }
    
    const userState = userStates.get(ctx.from.id);
    userState.amount = amount;
    userState.step = 'selecting_from_currency';
    
    const buttons = createCurrencyButtons('from', null);
    buttons.push([Markup.button.callback('üîô –ù–∞–∑–∞–¥ –¥–æ –∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä–∞', 'currency_converter')]);
    
    const menu = Markup.inlineKeyboard(buttons);
    const currencyMessage = await ctx.reply(
      `üí∞ –í–≤–µ–¥–µ–Ω–∞ —Å—É–º–∞: ${amount}\n\nüí± –û–±–µ—Ä—ñ—Ç—å –≤–∞–ª—é—Ç—É, –∑ —è–∫–æ—ó –∫–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ:`,
      menu
    );
    
    trackMessage(ctx.from.id, currencyMessage.message_id);
  } catch (error) {
    console.error('–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ —Å—É–º–∏:', error);
    await ctx.reply('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ —Å—É–º–∏.');
  }
}

async function handleRatesAmountInput(ctx) {
  try {
    const amountText = ctx.message.text.trim();
    const amount = parseFloat(amountText.replace(',', '.'));
    
    if (isNaN(amount) || amount <= 0) {
      await ctx.reply('‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞ —Å—É–º–∞! –í–≤–µ–¥—ñ—Ç—å –¥–æ–¥–∞—Ç–Ω–µ —á–∏—Å–ª–æ.');
      return;
    }
    
    if (amount > 1000000) {
      await ctx.reply('‚ùå –°—É–º–∞ –∑–∞–Ω–∞–¥—Ç–æ –≤–µ–ª–∏–∫–∞! –ú–∞–∫—Å–∏–º—É–º 1,000,000.');
      return;
    }
    
    userStates.delete(ctx.from.id);
    const message = currencyConverter.formatExchangeRatesForAmount(amount);
    
    const buttons = [
      [Markup.button.callback('üí∞ –í–≤–µ—Å—Ç–∏ —ñ–Ω—à—É —Å—É–º—É', 'enter_amount_for_rates')],
      [Markup.button.callback('üè¶ –ó–º—ñ–Ω–∏—Ç–∏ –±–∞–∑–æ–≤—É –≤–∞–ª—é—Ç—É', 'select_base_currency')],
      [Markup.button.callback('üîÑ –û–Ω–æ–≤–∏—Ç–∏ –∫—É—Ä—Å–∏', 'refresh_rates')],
      [Markup.button.callback('üîô –ù–∞–∑–∞–¥ –¥–æ –∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä–∞', 'currency_converter')]
    ];
    
    const menu = Markup.inlineKeyboard(buttons);
    const ratesMessage = await ctx.reply(message, menu);
    
    trackMessage(ctx.from.id, ratesMessage.message_id);
  } catch (error) {
    console.error('–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ —Å—É–º–∏ –¥–ª—è –∫—É—Ä—Å—ñ–≤:', error);
    await ctx.reply('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ —Å—É–º–∏.');
  }
}

process.on('uncaughtException', (err) => {
  console.error('Uncaught Exception:', err);
  // –ù–µ –∑–∞–≤–µ—Ä—à—É—î–º–æ –ø—Ä–æ—Ü–µ—Å!
});

process.on('unhandledRejection', (reason, promise) => {
  console.error('Unhandled Rejection at:', promise, 'reason:', reason);
  // –ù–µ –∑–∞–≤–µ—Ä—à—É—î–º–æ –ø—Ä–æ—Ü–µ—Å!
});

const REMINDER_CHECK_INTERVAL_SECONDS = parseInt(process.env.REMINDER_CHECK_INTERVAL_SECONDS, 10) || 60;

reminderSystem.startAutoCheck();